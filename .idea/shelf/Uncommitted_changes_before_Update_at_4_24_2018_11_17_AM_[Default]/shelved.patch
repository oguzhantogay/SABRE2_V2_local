Index: V2_dev/SABRE2_main_subclass.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import PyQt4\nimport sys\nfrom PyQt4.QtGui import *\nfrom PyQt4 import QtGui, QtCore\nfrom PyQt4 import QtGui\nimport DropDownActions\nimport OpenGLcode\nimport AddNode\nimport h5_file\nimport numpy as np\nimport sqlite3 as sq\nimport Assign_Member_Properties\nimport BoundaryConditionApplication\n\ntry:\n    _fromUtf8 = QtCore.QString.fromUtf8\nexcept AttributeError:\n    def _fromUtf8(s):\n        return s\n\ntry:\n    from OpenGL import GL\nexcept ImportError:\n    app = QtGui.QApplication(sys.argv)\n    QtGui.QMessageBox.critical(None, \"OpenGL hellogl\",\n                               \"PyOpenGL must be installed to run this example.\")\n    sys.exit(1)\n\n\nclass SABRE2_main_subclass(QMainWindow):\n    def __init__(self, ui_layout):\n\n        QMainWindow.__init__(self)\n        self.ui = ui_layout\n        ui_layout.setupUi(self)\n        ui_layout.statusBar = self.statusBar()\n        ui_layout.DefinitionTabs.close()  # to hide problem definition tabs\n        ui_layout.AnalysisTabs.close()  # to hide analysis tabs\n        SABRE2_main_subclass.OpenGLwidget = OpenGLcode.glWidget(ui_layout)\n        h5_file.h5_Class.generate_file(self)\n        AddNode.AddNodeClass.validatorForTable(self)\n        self.ActionMenus = DropDownActions.ActionClass(ui_layout)\n        SABRE2_main_subclass.Massemble = np.zeros((1, 16))\n        self.table_prop = np.zeros((1, 14))\n        self.members_table_values = np.zeros((1, 18))\n        ui_layout.Member_Properties_Table.setEnabled(False)\n        ui_layout.BoundaryConditionsTabs.setEnabled(False)\n        ui_layout.LC_tabs.setEnabled(False)\n        SABRE2_main_subclass.BNodevalue = None\n        self.SNodevalue = None\n        ###  Setting validators for the lineEdit positions\n        validatorDouble = QDoubleValidator()\n        validatorInt = QIntValidator ()\n        ui_layout.AddNodePositionFrom.setValidator(validatorDouble)\n        ui_layout.Insert_row_number_Joint.setValidator(validatorInt)\n        ui_layout.Insert_row_number_Joint_2.setValidator(validatorInt)\n        ui_layout.Insert_row_number_mem_def.setValidator(validatorInt)\n        ui_layout.Delete_row_number_mem_def.setValidator(validatorInt)\n        ui_layout.Copy_from_number_mem_def.setValidator(validatorInt)\n        ui_layout.Insert_after_number_mem_def.setValidator(validatorInt)\n        ui_layout.Member_prop_line_edit.setValidator(validatorInt)\n        ui_layout.Copy_number_spring.setValidator(validatorInt)\n        ui_layout.Paste_number_spring.setValidator(validatorInt)\n        ui_layout.Inser_number_point_load.setValidator(validatorInt)\n        ui_layout.Delete_number_point_load.setValidator(validatorInt)\n        ui_layout.Inser_number_uni_load.setValidator(validatorInt)\n        ui_layout.Delete_number_uni_load.setValidator(validatorInt)\n        ###\n\n        # ui_layout.AddNodePositionFrom.textChanged.connect(lambda : AddNode.AddNodeClass.setAddNodeComboBox(self))\n        ui_layout.actionRender_Line_Element.setCheckable(True)\n        ui_layout.actionRender_Selected_Member.setCheckable(True)\n        ui_layout.actionRender_All_Members.setCheckable(True)\n        ui_layout.Members_tab.setEnabled(False)\n        ui_layout.verticalLayout_8.insertWidget(0, SABRE2_main_subclass.OpenGLwidget)\n        # SABRE2_main_subclass.OpenGLwidget.resizeGL(SABRE2_main_subclass.OpenGLwidget.width(), SABRE2_main_subclass.OpenGLwidget.height())\n        # SABRE2_main_subclass.OpenGLwidget.resized.connect(self.someFunction)\n        ui_layout.actionRender_All_Members.triggered.connect(\n            lambda: ui_layout.actionRender_Line_Element.setChecked(False))\n        ui_layout.actionRender_All_Members.triggered.connect(\n            lambda: SABRE2_main_subclass.OpenGLwidget.updateTheWidget())\n        ui_layout.actionRender_All_Members.triggered.connect(\n            lambda: ui_layout.actionRender_Selected_Member.setChecked(False))\n        ui_layout.actionRender_Line_Element.triggered.connect(\n            lambda: ui_layout.actionRender_Selected_Member.setChecked(False))\n        ui_layout.actionRender_Line_Element.triggered.connect(\n            lambda: ui_layout.actionRender_All_Members.setChecked(False))\n        ui_layout.actionRender_Selected_Member.triggered.connect(\n            lambda: ui_layout.actionRender_Line_Element.setChecked(False))\n        ui_layout.actionRender_Selected_Member.triggered.connect(\n            lambda: ui_layout.actionRender_All_Members.setChecked(False))\n        ui_layout.actionIsometric_X_Y_Z_View.triggered.connect(lambda: SABRE2_main_subclass.OpenGLwidget.isometricView())\n        ui_layout.actionTop_X_Z_View.triggered.connect(lambda: SABRE2_main_subclass.OpenGLwidget.topView())\n        ui_layout.actionFront_X_Y_View.triggered.connect(lambda: SABRE2_main_subclass.OpenGLwidget.frontView())\n        ui_layout.actionSide_Y_Z_View.triggered.connect(lambda: SABRE2_main_subclass.OpenGLwidget.sideView())\n        ui_layout.actionFit_View.triggered.connect(lambda: SABRE2_main_subclass.OpenGLwidget.setFitView())\n        ui_layout.actionZoom_In.triggered.connect(lambda: SABRE2_main_subclass.OpenGLwidget.setZoomIn())\n        ui_layout.actionZoom_Out.triggered.connect(lambda: SABRE2_main_subclass.OpenGLwidget.setZoomOut())\n        ui_layout.actionWhite_Background.triggered.connect(lambda: SABRE2_main_subclass.OpenGLwidget.updateTheWidget())\n        # Release Tab, first columns of the tables size arrangements\n        ui_layout.Torsional_Release.setColumnWidth(0, 62)\n        ui_layout.My_release.setColumnWidth(0, 62)\n        ui_layout.Mz_release.setColumnWidth(0, 62)\n        ui_layout.Warping_Release.setColumnWidth(0, 62)\n\n        # main buttons actions\n        ui_layout.DefinitionButton.clicked.connect(lambda: ui_layout.AnalysisTabs.close())\n        ui_layout.AnalysisButton.clicked.connect(lambda: ui_layout.DefinitionTabs.close())\n        LineChanges.set_member_definition_AISC_combobox(self, ui_layout)  # set AISC database combobox values\n\n        # File dropdown actions\n        # ui_layout.actionNew.triggered.connect(lambda: ActionClass('uidesign').NewAct())\n        ui_layout.actionOpen.triggered.connect(lambda: self.ActionMenus.OpenAct())\n        ui_layout.actionSave.triggered.connect(lambda: self.ActionMenus.SaveAct())\n        # ui_layout.actionOpen.triggered.connect(lambda: self.table_prop_read())\n        ui_layout.actionOpen.triggered.connect(lambda: AddNode.AddNodeClass.ApplyButton(self))\n        ui_layout.actionJoint_Member_Labels.triggered.connect(lambda: SABRE2_main_subclass.OpenGLwidget.updateTheWidget())\n        ui_layout.actionMember_Labels.triggered.connect(lambda: SABRE2_main_subclass.OpenGLwidget.updateTheWidget())\n        # ui_layout.actionSave_As.triggered.connect(lambda: ActionClass('uidesign').Save_AsAct())\n        # ui_layout.actionPrint.triggered.connect(lambda: ActionClass('uidesign').PrintAct())\n        # ui_layout.actionPrint_Preview.triggered.connect(lambda: ActionClass('uidesign').Print_PreviewAct())\n        ui_layout.actionQuit.triggered.connect(qApp.quit)\n\n        # Help dropdown actions\n        ui_layout.actionAbout.triggered.connect(lambda: DropDownActions.ActionClass('uidesign').AboutAct())\n        ui_layout.actionJoint_Member_Labels.triggered.connect(\n            lambda: SABRE2_main_subclass.OpenGLwidget.updateTheWidget())\n        ui_layout.actionMember_Labels.triggered.connect(lambda: SABRE2_main_subclass.OpenGLwidget.updateTheWidget())\n        ui_layout.actionFlange_Labels.triggered.connect(lambda : SABRE2_main_subclass.OpenGLwidget.updateTheWidget())\n\n        # Joint Table Arrangements\n\n        # ui_layout.Joints_Table.itemChanged.connect(\n        #     lambda: self.update_joints_table(ui_layout.Joints_Table))\n\n        ui_layout.Joints_Table.itemChanged.connect(\n            lambda: SABRE2_main_subclass.OpenGLwidget.updateTheWidget())\n\n        ui_layout.Joints_Table.itemChanged.connect(\n            lambda: SABRE2_main_subclass.OpenGLwidget.resizeGL(SABRE2_main_subclass.OpenGLwidget.width(), SABRE2_main_subclass.OpenGLwidget.height()))\n\n        ui_layout.Members_table.itemChanged.connect(\n            lambda: SABRE2_main_subclass.OpenGLwidget.resizeGL(SABRE2_main_subclass.OpenGLwidget.width(), SABRE2_main_subclass.OpenGLwidget.height()))\n\n        ui_layout.Add_new_row_joint.clicked.connect(\n            lambda: JointTable.add_new_row(self, ui_layout.Joints_Table, ui_layout.Insert_row_number_Joint, \"last\"))\n\n        ui_layout.Insert_row_button_Joint.clicked.connect(\n            lambda: JointTable.add_new_row(self, ui_layout.Joints_Table, ui_layout.Insert_row_number_Joint,\n                                           \"arbitrary\"))\n\n        ui_layout.Delete_last_row_Joint.clicked.connect(\n            lambda: JointTable.delete_row(self, ui_layout.Joints_Table, ui_layout.Delete_row_number_mem_def, \"last\"))\n\n        ui_layout.Delete_last_row_Joint.clicked.connect(\n            lambda: SABRE2_main_subclass.OpenGLwidget.updateTheWidget())\n\n        ui_layout.Delete_row_button_Joint.clicked.connect(\n            lambda: JointTable.delete_row(self, ui_layout.Joints_Table, ui_layout.Insert_row_number_Joint_2,\n                                          \"arbitrary\"))\n\n        # Members Table Arrangements\n        self.Members_table_options = [\"Mid Depth\", \"Flange 2\", \"Flange 1\"]\n        self.Members_table_position = 3\n        # The data update for members tab\n        DataCollection.Assign_comboBox(self, ui_layout.Members_table, self.Members_table_options,\n                                       self.Members_table_position)\n\n        # Boundary conditions tab - shear panel settings\n        shear_panel_options = [\"Flange 2\", \"Shear Center\", \"Flange 1\"]\n        shear_panel_position = 1\n\n\n        Boundary_Conditions.Assign_comboBox_ground(self, ui_layout.Discrete_grounded_spring_table, shear_panel_options,\n                                                   shear_panel_position)\n\n        # Add new row button # self, tableName, options, position\n        ui_layout.Members_table.itemChanged.connect(\n            lambda: self.update_members_table(ui_layout.Members_table,\n                                              self.Members_table_position))\n\n        ui_layout.Members_table.itemChanged.connect(lambda: self.members_defined_check())\n\n\n        ui_layout.RemoveAddedNodePB.clicked.connect(\n            lambda: AddNode.AddNodeClass.removeNodeDialog(self))\n\n        ui_layout.Members_table.itemChanged.connect(\n            lambda: SABRE2_main_subclass.OpenGLwidget.updateTheWidget())\n\n        ui_layout.Members_table.itemChanged.connect(\n            lambda: self.m_assemble_updater(ui_layout.Members_table, flag=\"cell changed\"))\n        # change number of rows of Member Properties table\n        ui_layout.Members_table.itemChanged.connect(\n            lambda: MemberPropertiesTable.set_number_of_rows(self, ui_layout.Members_table,\n                                                             ui_layout.Member_Properties_Table))\n        ## BOUNDARY CONDITIONS APPLICATION\n        # Fixities table:\n        ui_layout.Fixities_table.itemChanged.connect(\n            lambda: Boundary_Conditions.get_checkbox_values(self, ui_layout.Fixities_table))\n\n        ui_layout.Fixities_table.itemChanged.connect(\n            lambda: BoundaryConditionApplication.BoundaryConditionArrays.BC_arrays(self))\n\n        # change number of rows of Shear Panel Table\n        # ui_layout.Members_table.itemChanged.connect(\n        #     lambda: Boundary_Conditions.shear_panel_application(self, ui_layout.Shear_panel_table,\n        #                                                         ui_layout.Members_table,\n        #                                                         shear_panel_options, shear_panel_position))\n\n        ui_layout.Members_table.itemChanged.connect(\n            lambda: SABRE2_main_subclass.OpenGLwidget.updateTheWidget())\n\n        ui_layout.Mem_def_add.clicked.connect(\n            lambda: TableChanges.add_new_row(self, ui_layout.Members_table, self.Members_table_options,\n                                             self.Members_table_position, ui_layout.Insert_row_number_mem_def, \"last\", ))\n\n        ui_layout.Mem_def_add.clicked.connect(lambda: self.m_assemble_updater(ui_layout.Members_table, flag=\"last\"))\n\n        # ui_layout.Mem_def_add.clicked.connect(lambda: Assign_Member_Properties.Assign_All_Class.assign_SNodevalue(self))\n\n\n        ui_layout.Insert_row_mem_def_button.clicked.connect(\n            lambda: TableChanges.add_new_row(self, ui_layout.Members_table, self.Members_table_options,\n                                             self.Members_table_position, ui_layout.Insert_row_number_mem_def,\n                                             \"arbitrary\"))\n        ui_layout.Insert_row_mem_def_button.clicked.connect(\n            lambda: self.m_assemble_updater(ui_layout.Members_table, lineName=ui_layout.Insert_row_number_mem_def))\n\n        ui_layout.Mem_def_delete.clicked.connect(\n            lambda: TableChanges.delete_row(self, ui_layout.Members_table, ui_layout.Delete_row_number_mem_def, \"last\"))\n\n        ui_layout.Mem_def_delete.clicked.connect(\n            lambda:self.m_assemble_updater(ui_layout.Members_table, flag=\"Delete Last\"))\n\n        ## Member properties set up with Member cross-section table changes\n\n        ui_layout.Members_table.itemChanged.connect(lambda: Assign_Member_Properties.Assign_All_Class.assign_SNodevalue(self, flag='members table'))\n\n        ui_layout.Mem_def_delete.clicked.connect(lambda: Assign_Member_Properties.Assign_All_Class.assign_SNodevalue(self, flag='Mem_def_delete table'))\n\n        ui_layout.Mem_def_add.clicked.connect(lambda: Assign_Member_Properties.Assign_All_Class.assign_SNodevalue(self, flag='Mem_def_add table'))\n\n        ui_layout.Insert_row_mem_def_button.clicked.connect(lambda: Assign_Member_Properties.Assign_All_Class.assign_SNodevalue(self, flag='Insert_row_mem_def_button table'))\n\n        ui_layout.Delete_row_mem_def_button.clicked.connect(lambda: Assign_Member_Properties.Assign_All_Class.assign_SNodevalue(self, flag='Delete_row_mem_def_button table'))\n\n        ui_layout.Copy_mem_def_button.clicked.connect(lambda: Assign_Member_Properties.Assign_All_Class.assign_SNodevalue(self, flag='Copy_mem_def_button table'))\n\n\n        ##\n        ui_layout.Delete_row_mem_def_button.clicked.connect(\n            lambda: TableChanges.delete_row(self, ui_layout.Members_table, ui_layout.Delete_row_number_mem_def,\n                                            \"arbitrary\"))\n        ui_layout.Delete_row_mem_def_button.clicked.connect(\n            lambda:self.m_assemble_updater(ui_layout.Members_table, Delete_row= ui_layout.Delete_row_number_mem_def,flag=\"Delete Selected\"))\n\n        # Members line CopyInsert\n        ui_layout.Copy_from_number_mem_def.textChanged.connect(\n            lambda: self.update_members_copyfrom(ui_layout.Copy_from_number_mem_def,\n                                                 self.Members_table_position, ui_layout.Members_table))\n\n        ui_layout.Insert_after_number_mem_def.textChanged.connect(\n            lambda: self.update_members_insertafter(ui_layout.Insert_after_number_mem_def,\n                                                    self.Members_table_position, ui_layout.Members_table))\n\n        ui_layout.Copy_mem_def_button.clicked.connect(\n            lambda: LineChanges.copy_insert_row(self, ui_layout.Members_table, self.Members_table_options,\n                                                self.Members_table_position, ui_layout.Copy_from_number_mem_def,\n                                                ui_layout.Insert_after_number_mem_def))\n\n        ui_layout.Copy_mem_def_button.clicked.connect(lambda: self.m_assemble_updater(ui_layout.Members_table,\n                                                                                      Copy_from_number=ui_layout.Copy_from_number_mem_def,\n                                                                                      Insert_after_number=ui_layout.Insert_after_number_mem_def,\n                                                                                      flag=\"copy from\"))\n        ui_layout.AISC_assign_button.clicked.connect(\n            lambda: self.AISC_update_fun(ui_layout.Members_table))\n\n\n        ui_layout.AISC_assign_button.clicked.connect(\n            lambda: SABRE2_main_subclass.OpenGLwidget.updateTheWidget())\n\n        # ui_layout.AISC_assign_button.clicked.connect(lambda : self.m_assemble_updater(ui_layout.Members_table, ))\n        # Add Node Menu Actions and Arrangements\n        ui_layout.Members_tabs.currentChanged.connect(lambda: AddNode.AddNodeClass.setAddNodeComboBox(self))\n        ui_layout.Members_tabs.currentChanged.connect(lambda: AddNode.AddNodeClass.addNodeTableInitiation(self))\n\n        ui_layout.AddNodeMember.currentIndexChanged.connect(lambda: AddNode.AddNodeClass.addNodeTableInitiation(self))\n        ui_layout.AddNodeMember.currentIndexChanged.connect(lambda: AddNode.AddNodeClass.comboBoxChanged(self))\n        ui_layout.AddNodeMember.currentIndexChanged.connect(lambda: AddNode.AddNodeClass.setAddedNodeComboBox(self))\n\n        ui_layout.AdditionalNodeNumberComboBox.currentIndexChanged.connect(lambda: AddNode.AddNodeClass.fill_table_with_known(self))\n\n        ui_layout.addNodePushButton.clicked.connect(lambda: AddNode.AddNodeClass.addNodePushFun(self))\n\n        ui_layout.FollowTaper.clicked.connect(lambda : AddNode.AddNodeClass.fillTable(self))\n\n        ui_layout.FollowTaper.clicked.connect(lambda:AddNode.AddNodeClass.coordinateFill(self))\n\n        ui_layout.AISC_assign_button_2.clicked.connect(\n            lambda: AddNode.AddNodeClass.sql_print(self))\n\n        ui_layout.AddNodeApply.clicked.connect(lambda : AddNode.AddNodeClass.ApplyButton(self))\n\n        ui_layout.AddNodeApply.clicked.connect(lambda : SABRE2_main_subclass.OpenGLwidget.updateTheWidget())\n\n        # For boundary conditions definition\n\n        # ui_layout.DefinitionTabs.itemSelectionChanged.connect(lambda : SABRE2_main_subclass.OpenGLwidget.updateTheWidget())\n\n        # Member Properties Table\n        ui_layout.Apply_all_member_properties.clicked.connect(\n            lambda: MemberPropertiesTable.set_values_with_row(self, ui_layout.Member_Properties_Table,\n                                                              ui_layout.Member_prop_line_edit))\n\n        # ui_layout.Member_Properties_Table.itemChanged.connect(\n        #     lambda: MemberPropertiesTable.check_values(self, ui_layout.Member_Properties_Table))\n\n        # ui_layout.Member_Properties_Table.itemChanged.connect(\n        #     lambda: MemberPropertiesTable.check_values(self, ui_layout.Member_Properties_Table))\n\n        ui_layout.Member_Properties_Table.itemChanged.connect(\n            lambda: Assign_Member_Properties.Assign_All_Class.assign_SNodevalue(self))\n\n        # ui_layout.Delete_new_row_button_shear_panel.clicked.connect(\n        #     lambda: Boundary_Conditions.set_active(self, ui_layout.Shear_panel_table,\n        #                                            ui_layout.Delete_number_shear_panel))\n\n        # Boundary conditions tab - shear panel settings\n        ui_layout.Shear_panel_table.itemChanged.connect(\n            lambda: Boundary_Conditions.shear_panel_nodes(self, ui_layout.Shear_panel_table, [0, 1]))\n\n        ui_layout.Shear_Panel_Add.clicked.connect(\n            lambda: Boundary_Conditions.shear_panel_additional(self))\n\n        ui_layout.Delete_last_panel.clicked.connect(\n            lambda: Boundary_Conditions.shear_panel_delete(self))\n\n        ui_layout.Shear_panel_table.itemChanged.connect(\n            lambda: self.update_shear_panel_table(ui_layout.Shear_panel_table))\n\n        ui_layout.Discrete_grounded_spring_table.itemChanged.connect(\n            lambda: Boundary_Conditions.check_entered_data(self, ui_layout.Discrete_grounded_spring_table))\n\n        ui_layout.Discrete_grounded_spring_table.itemChanged.connect(\n            lambda: self.update_ground_table(ui_layout.Discrete_grounded_spring_table, flag=\"not combo\"))\n\n        # Release Tab\n        ui_layout.Torsional_Release.itemChanged.connect(\n            lambda: self.update_torsional_release(ui_layout.Torsional_Release))\n\n        ui_layout.My_release.itemChanged.connect(\n            lambda: self.update_My_release(ui_layout.My_release))\n\n        ui_layout.Mz_release.itemChanged.connect(\n            lambda: self.update_Mz_release(ui_layout.Mz_release))\n\n        ui_layout.Warping_Release.itemChanged.connect(\n            lambda: self.update_warping_release(ui_layout.Warping_Release))\n\n        # Loading Tabs\n\n        ui_layout.LoadTypeTable.itemChanged.connect(\n            lambda: LoadingClass.changes_on_load_combination(self, ui_layout.LoadTypeTable,\n                                                             ui_layout.LoadCombinationTable))\n\n        ui_layout.LoadTypeAdd.clicked.connect(lambda: LoadingClass.add_load(self, ui_layout.LoadTypeTable))\n\n        ui_layout.LoadTypeRemove.clicked.connect(lambda: LoadingClass.remove_load(self, ui_layout.LoadTypeTable))\n\n        # Load Combinations Table\n\n        ui_layout.LoadCombinationTable.itemChanged.connect(\n            lambda: LoadingClass.get_combination_data(self, ui_layout.LoadCombinationTable))\n        ui_layout.LoadCombinationAdd.clicked.connect(\n            lambda: LoadingClass.add_load_comb(self, ui_layout.LoadCombinationTable))\n\n        ui_layout.LoadCombinationRemove.clicked.connect(\n            lambda: LoadingClass.remove_load(self, ui_layout.LoadCombinationTable))\n\n        # Distributed Load table arrangements\n\n        uniform_load_options = [\"Flange 2\", \"Shear Center\", \"Flange 1\", \"Mid Web\", \"Centroid\"]\n        load_place_position = 2\n        load_type_position = 1\n\n        ui_layout.LoadTypeTable.itemChanged.connect(\n            lambda: uniform_load_def.combo_box_types(self, ui_layout.Uniform_loading_table, ui_layout.LoadTypeTable,\n                                                     load_type_position))\n\n        uniform_load_def.set_combo_box(self, ui_layout.Uniform_loading_table, uniform_load_options,\n                                       load_place_position)\n\n        uniform_load_def.combo_box_types(self, ui_layout.Uniform_loading_table, ui_layout.LoadTypeTable,\n                                         load_type_position)\n\n        ui_layout.Uniform_loading_table.itemChanged.connect(\n            lambda: self.update_uniform_data(ui_layout.Uniform_loading_table, combo_flag=0))\n\n        # Point Load table arrangements\n\n        uniform_load_options = [\"Shear Center\", \"Flange 2 + alpha\", \"Flange 1 + alpha\", \"Centroid\"]\n\n        ui_layout.LoadTypeTable.itemChanged.connect(\n            lambda: point_load_def.combo_box_types(self, ui_layout.Point_load_table, ui_layout.LoadTypeTable,\n                                                   load_type_position))\n\n        point_load_def.set_combo_box(self, ui_layout.Point_load_table, uniform_load_options,\n                                     load_place_position)\n\n        point_load_def.combo_box_types(self, ui_layout.Point_load_table, ui_layout.LoadTypeTable,\n                                       load_type_position)\n\n        ui_layout.Point_load_table.itemChanged.connect(\n            lambda: self.update_point_data(ui_layout.Point_load_table, combo_flag=0))\n\n        # Progress bar\n        # put me in analysis section\n        ui_layout.progressBar = PyQt4.QtGui.QProgressBar()\n        ui_layout.statusbar.addPermanentWidget(ui_layout.progressBar)\n        analysisprogress = 0  # Update this value later by integrating with analysis**********\n        ui_layout.progressBar.setValue(analysisprogress)\n        ui_layout.progressBar.setTextVisible(True)\n\n    # Joints table functions\n    def update_joints_table(self, tableName):\n        Joint_values = JointTable.tableValues(self, tableName)\n        # print(\"main screen Joint values\", Joint_values)\n        return Joint_values\n\n    # Members tab, Member definition functions\n    def update_members_table(self, tableName, position):\n        JNodeValue = SABRE2_main_subclass.update_joints_table(self, self.ui.Joints_Table)\n        Members_values, current_row, current_col, flag_mem_values = DataCollection.update_table_values(self, tableName, position)\n\n        if current_col == 1 or current_col == 2:\n            if Members_values[current_row, current_col] in JNodeValue[:, 0]:\n                DropDownActions.ActionClass.statusMessage(self, message=\"\")\n            elif Members_values[current_row, current_col] == 0:\n                self.ui.Members_table.setCurrentCell(current_row, current_col)\n                DropDownActions.ActionClass.statusMessage(self,\n                                                          message=\"The member has been defined before. Please change the highlighted cell!\")\n            else:\n                DropDownActions.ActionClass.statusMessage(self,\n                                                          message=\"Please enter a joint number that is in the Joints Tab\")\n                col = tableName.currentColumn()\n                row = tableName.currentRow()\n                tableName.item(row, col).setText(\"0\")\n                self.ui.Members_tabs.setCurrentIndex(0)\n\n        row_count = tableName.rowCount()\n        # print(\"row count = \", row_count)\n        Rval = np.zeros((row_count, 2))\n        SABRE2_main_subclass.BNodevalue = h5_file.h5_Class.read_array(self,'BNodevalue')\n        for i in range(row_count):\n            Rval[i][0] = Members_values[i][0]\n            Rval[i][1] = Members_values[i][3] + 1\n        # print(\"update = \", SABRE2_main_subclass.BNodevalue, \"\\nshape = \", SABRE2_main_subclass.BNodevalue.shape[1])\n        if SABRE2_main_subclass.BNodevalue.shape[2] != 16:\n            SABRE2_main_subclass.BNodevalue = np.zeros((row_count, 1, 2))\n            # print(\"update = \", SABRE2_main_subclass.BNodevalue)\n            if row_count == SABRE2_main_subclass.BNodevalue.shape[0]:\n                for i in range(row_count):\n                    SABRE2_main_subclass.BNodevalue[i][0][0] = i + 1\n                    SABRE2_main_subclass.BNodevalue[i][0][1] = 0  # to indicate zero bracing\n        elif SABRE2_main_subclass.BNodevalue.shape[2] == 2:\n            SABRE2_main_subclass.BNodevalue = np.zeros((row_count, 1, 2))\n            if row_count == SABRE2_main_subclass.BNodevalue.shape[0]:\n                for i in range(row_count):\n                    SABRE2_main_subclass.BNodevalue[i][0][0] = i + 1\n                    SABRE2_main_subclass.BNodevalue[i][0][1] = 0  # to indicate zero bracing\n\n        h5_file.h5_Class.update_array(self, SABRE2_main_subclass.BNodevalue, 'BNodevalue')\n        JNodeValue_i = np.zeros((Members_values.shape[0], 14))\n        JNodeValue_j = np.zeros((Members_values.shape[0], 14))\n\n        for i in range(Members_values.shape[0]):\n            # i node values\n            if flag_mem_values[i][1] == 1:\n                JNodeValue_i[i][0] = Members_values[i][0]\n                JNodeValue_i[i][1] = Members_values[i][1]\n                JNodeValue_i[i][2] = JNodeValue[int(Members_values[i][1] - 1)][1]\n                JNodeValue_i[i][3] = JNodeValue[int(Members_values[i][1] - 1)][2]\n                JNodeValue_i[i][4] = JNodeValue[int(Members_values[i][1] - 1)][3]\n                JNodeValue_i[i][5] = Members_values[i][4]\n                JNodeValue_i[i][6] = Members_values[i][5]\n                JNodeValue_i[i][7] = Members_values[i][6]\n                JNodeValue_i[i][8] = Members_values[i][7]\n                JNodeValue_i[i][9] = Members_values[i][12]\n                JNodeValue_i[i][10] = Members_values[i][13]\n                JNodeValue_i[i][11] = JNodeValue_i[i][9] + JNodeValue_i[i][6] + JNodeValue_i[i][8]\n                JNodeValue_i[i][12] = JNodeValue_i[i][9] + (JNodeValue_i[i][6] + JNodeValue_i[i][8]) / 2\n                JNodeValue_i[i][13] = Members_values[i][16]\n                # j node values\n                JNodeValue_j[i][0] = Members_values[i][0]\n                JNodeValue_j[i][1] = Members_values[i][2]\n                JNodeValue_j[i][2] = JNodeValue[int(Members_values[i][2] - 1)][1]\n                JNodeValue_j[i][3] = JNodeValue[int(Members_values[i][2] - 1)][2]\n                JNodeValue_j[i][4] = JNodeValue[int(Members_values[i][2] - 1)][3]\n                JNodeValue_j[i][5] = Members_values[i][8]\n                JNodeValue_j[i][6] = Members_values[i][9]\n                JNodeValue_j[i][7] = Members_values[i][10]\n                JNodeValue_j[i][8] = Members_values[i][11]\n                JNodeValue_j[i][9] = Members_values[i][14]\n                JNodeValue_j[i][10] = Members_values[i][15]\n                JNodeValue_j[i][11] = JNodeValue_j[i][9] + JNodeValue_j[i][6] + JNodeValue_j[i][8]\n                JNodeValue_j[i][12] = JNodeValue_j[i][9] + (JNodeValue_j[i][6] + JNodeValue_j[i][8]) / 2\n                JNodeValue_j[i][13] = Members_values[i][17]\n\n\n\n\n        # print(\"Rval\", Rval)\n        self.members_table_values = Members_values\n        # print('self.members_table_values', self.members_table_values)\n        # print(\"main screen node i\", JNodeValue_i)\n        # print(\"main screen node j\", JNodeValue_j)\n        # self.members_defined_check()\n        return Members_values, JNodeValue_i, JNodeValue_j, current_row, SABRE2_main_subclass.BNodevalue, flag_mem_values, Rval\n\n    def members_defined_check(self):\n        check_array = h5_file.h5_Class.read_array(self, 'check_array')\n        row_count = self.ui.Members_table.rowCount()\n        current_row = self.ui.Members_table.currentRow()\n        # print('row_count = ' ,row_count)\n        # print('row_count1 = ' ,check_array.shape[0])\n        if check_array.shape[0] != row_count:\n            check_array = np.zeros((row_count,1))\n        elif check_array[current_row][0] != 1:\n            for j in range(row_count):\n                for i in range(18):\n                    # print(i, '     ' , self.ui.Members_table.item(current_row, i))\n\n                    if i == 3:\n                        pass\n                    elif self.ui.Members_table.item(j, i) is not None:\n                        check_array[j][0] = 1\n                    else:\n                        check_array[j][0] = 0\n        # print('check array = ', check_array)\n        h5_file.h5_Class.update_array(self, check_array, 'check_array')\n\n    def AISC_update_fun(self, tableName):\n        # tableName.blockSignals(True)\n        try:\n            Massemble, current_row_number, row_count, table_prop = LineChanges.sql_print(self, tableName)\n            # print('table prop = ', current_row_number)\n            # print('self = ', self.table_prop)\n            self.table_prop[current_row_number][0] = table_prop[0, 0]\n            self.table_prop[current_row_number][2] = table_prop[0, 0]\n            self.table_prop[current_row_number][4] = table_prop[0, 0]\n            self.table_prop[current_row_number][6] = table_prop[0, 0]\n            self.table_prop[current_row_number][1] = table_prop[0, 1]\n            self.table_prop[current_row_number][3] = table_prop[0, 1]\n            self.table_prop[current_row_number][5] = table_prop[0, 1]\n            self.table_prop[current_row_number][7] = table_prop[0, 1]\n            self.table_prop[current_row_number][8] = table_prop[0, 16]\n            self.table_prop[current_row_number][10] = table_prop[0, 16]\n            self.table_prop[current_row_number][9] = table_prop[0, 3]\n            self.table_prop[current_row_number][11] = table_prop[0, 3]\n            self.table_prop[current_row_number][12] = table_prop[0, 17]\n            self.table_prop[current_row_number][13] = table_prop[0, 17]\n\n            # print(\"Massemble = \", Massemble)\n            # print(\"table prop 2= \", self.table_prop)\n            h5_file.h5_Class.update_array(self,self.table_prop, 'table_prop')\n\n\n            for i in range(16):\n                SABRE2_main_subclass.Massemble[int(current_row_number)][i] = Massemble[0][i]\n\n            self.m_assemble_updater(tableName, flag=\"cell changed\")\n\n            return Massemble, current_row_number, row_count\n        except TypeError:\n            pass\n\n    def update_members_copyfrom(self, lineName, position, tableName):\n        copyfrom_value = DataCollection.update_lineedit_values(self, lineName)\n        copyfrom_value = copyfrom_value - 1\n        r = tableName.rowCount()\n        try:\n            if copyfrom_value <= r - 1:\n                tableName.selectRow(copyfrom_value)\n                DropDownActions.ActionClass.statusMessage(self, message=\"\")\n        except TypeError:\n            DropDownActions.ActionClass.statusMessage(self, message=\"Row not defined\")\n        return copyfrom_value\n\n    def update_members_insertafter(self, lineName, position, tableName):\n        r = tableName.rowCount()\n        try:\n            insertafter_values = DataCollection.update_lineedit_values(self, lineName)\n            insertafter_values = insertafter_values - 1\n\n            if insertafter_values <= r - 1:\n                tableName.selectRow(insertafter_values)\n                DropDownActions.ActionClass.statusMessage(self, message=\"\")\n            else:\n                lineName.setText(\"\")\n\n        except TypeError:\n            DropDownActions.ActionClass.statusMessage(self, message=\"Row not defined\")\n        return insertafter_values\n\n    #table prop array for whether the section is from AISC database or not is read from the saved file\n    def table_prop_read(self):\n        self.table_prop, SABRE2_main_subclass.Massemble= DropDownActions.ActionClass.read_fun(self)\n\n\n\n\n\n    # Table Values Update\n\n    def update_member_properties_table(self, tableName):\n        prop_values = JointTable.tableValues(self, tableName)\n        # print(\"main screen Properties Table values\",self.table_prop)\n        return prop_values\n\n    def update_shear_panel_table(self, tableName, flag=\"not combo\"):\n        shear_values = Boundary_Conditions.shear_panel_values(self, tableName, flag)\n        h5_file.h5_Class.update_array(self, shear_values, 'shear_panel_values')\n        # print(\"main screen Shear Table Values\", shear_values)\n        return shear_values\n\n    def update_ground_table(self, tableName, flag=\"not combo\"):\n        shear_values = Boundary_Conditions.ground_spring_values(self, tableName, flag)\n        print(\"main screen Ground Table Values\", shear_values)\n        return shear_values\n\n    def update_torsional_release(self, tableName):\n        torsional_values = Boundary_Conditions.release_tables_values(self, tableName)\n        print(\"main screen Torsional Table Values\", torsional_values)\n        return torsional_values\n\n    def update_My_release(self, tableName):\n        My_values = Boundary_Conditions.release_tables_values(self, tableName)\n        print(\"main screen My Table Values\", My_values)\n        return My_values\n\n    def update_Mz_release(self, tableName):\n        Mz_values = Boundary_Conditions.release_tables_values(self, tableName)\n        print(\"main screen Mz Table Values\", Mz_values)\n        return Mz_values\n\n    def update_warping_release(self, tableName):\n        warping_values = Boundary_Conditions.release_tables_values(self, tableName)\n        print(\"main screen Warping Table Values\", warping_values)\n        return warping_values\n\n    def update_loading_types_conditions(self, tableName):\n        [table_data, ID_data] = LoadingClass.defined_load_names(self, tableName)\n        print(\"main screen load type IDs\", ID_data)\n        return ID_data\n\n    def update_uniform_data(self, tableName, combo_flag):\n        [uniform_data_vals, SegmentNames] = uniform_load_def.uniform_data_table(self, tableName, combo_flag)\n        print(\"main screen uniform load values\", uniform_data_vals)\n        return uniform_data_vals\n\n    def update_point_data(self, tableName, combo_flag):\n        point_data_vals = point_load_def.point_data_table(self, tableName, combo_flag)\n        print(\"main screen uniform load values\", point_data_vals)\n        return point_load_def\n\n    def m_assemble_updater(self, tableName, Copy_from_number=1, Insert_after_number=1, lineName=1, Delete_row = 1,\n                           flag=\"insert after button\"):\n        # print('flag in massembly updater = ', flag)\n        # print(\"members = \", self.members_table_values)\n        # print(\"massemble updater = \", SABRE2_main_subclass.Massemble)\n        row_count = tableName.rowCount()\n        to_append = np.zeros((1, 16))\n        to_append_prop = np.zeros((1, 14))\n        current_row = tableName.currentRow()\n\n\n        if flag == \"last\":\n            print('test last')\n            # print(self.table_prop)\n            SABRE2_main_subclass.Massemble = np.append(SABRE2_main_subclass.Massemble, to_append, axis=0)\n            self.table_prop = np.append(self.table_prop, to_append_prop, axis=0)\n            for i in range(3):\n                SABRE2_main_subclass.Massemble[current_row][i] = self.members_table_values[current_row][i]\n\n            # print('after = ', self.table_prop)\n\n        elif flag == \"insert after button\":\n            row_number = DataCollection.update_lineedit_values(self, lineName)\n            SABRE2_main_subclass.Massemble = np.insert(SABRE2_main_subclass.Massemble, row_number, 0, axis=0)\n            self.table_prop = np.insert(self.table_prop, row_number, 0, axis=0)\n            for i in range(3):\n                SABRE2_main_subclass.Massemble[current_row][i] = self.members_table_values[current_row][i]\n        elif flag == \"copy from\":\n            copyfrom_values = DataCollection.update_lineedit_values(self, Copy_from_number)\n            insertafter_values = DataCollection.update_lineedit_values(self, Insert_after_number)\n            SABRE2_main_subclass.Massemble = np.insert(SABRE2_main_subclass.Massemble, insertafter_values,\n                                       SABRE2_main_subclass.Massemble[(copyfrom_values - 1), :],\n                                       axis=0)\n            self.table_prop = np.insert(self.table_prop, insertafter_values,\n                                        self.table_prop[(copyfrom_values - 1), :],\n                                        axis=0)\n            for i in range(3):\n                SABRE2_main_subclass.Massemble[current_row][i] = self.members_table_values[current_row][i]\n\n        elif flag == \"Delete Last\":\n            SABRE2_main_subclass.Massemble = np.delete(SABRE2_main_subclass.Massemble,(row_count-1), axis = 0)\n\n        elif flag == \"Delete Selected\":\n            row_number = DataCollection.update_lineedit_values(self, Delete_row)\n            delete = int(row_number) - 1\n            SABRE2_main_subclass.Massemble = np.delete(SABRE2_main_subclass.Massemble, (delete), axis=0)\n\n            for i in range(row_count):\n                SABRE2_main_subclass.Massemble[i][0] = self.members_table_values[i][0]\n\n\n        elif flag == \"cell changed\":\n\n            row = tableName.currentRow()\n            # print('row in cell changed = ',row)\n            # print('SA_Massemble =', SABRE2_main_subclass.Massemble)\n            try:\n                for i in range(3):\n                    SABRE2_main_subclass.Massemble[row][i] = self.members_table_values[row][i]\n\n                for i in range(14):\n\n                    if tableName.item(row, i+3) is None:\n                        SABRE2_main_subclass.Massemble[row][3] = 1\n                        break\n\n                    elif np.isclose(self.table_prop[row][i], self.members_table_values[row][i + 4],\n                                             rtol=1e-05, atol=1e-08, equal_nan=False):\n                        # print(\"current row \" + str(current_row) + \" is rolled\")\n                        SABRE2_main_subclass.Massemble[row][3] = 1\n                    else:\n\n                        for i in range(1,14):\n                            SABRE2_main_subclass.Massemble[row][i+2] = 0\n\n                        # print(\"current row \" + str(current_row) + \" is welded\")\n                        break\n            except ValueError and IndexError:\n                pass\n        elif flag == \"OpenGL\":\n\n            pass\n            # try:\n            #     print(\"OpenGL = \", SABRE2_main_subclass.Massemble)\n            #     return SABRE2_main_subclass.Massemble\n            # except Exception as e:\n            #     print(\"Oops an exception occurred\")\n            #     print(e)\n\n        # print(\"table_\" , self.table_prop, \"\\n members table = \", self.members_table_values)\n        h5_file.h5_Class.update_array(self,SABRE2_main_subclass.Massemble,'Massemble')\n        h5_file.h5_Class.update_array(self, self.table_prop, 'table_prop')\n        return SABRE2_main_subclass.Massemble, self.table_prop\n        # pass\n\n    def resizeEvent(self, event):\n        # SABRE2_main_subclass.OpenGLwidget.resized.emit()\n        # return super(Window, self).resizeEvent(event)\n        pass\n\n    def someFunction(self):\n        # SABRE2_main_subclass.OpenGLwidget\n        pass\n        #\n        # width = SABRE2_main_subclass.OpenGLwidget.width()\n        # height = SABRE2_main_subclass.OpenGLwidget.height()\n        # print(\"Function\", width, height)\n        # print(x,y)\n        # SABRE2_main_subclass.OpenGLwidget.setMinimumSize()\n\n\n# class DropDownActions(QMainWindow):\n#     \"\"\"docstring for Actions\"\"\"\n#\n#     def __init__(self, ui_layout):\n#         QMainWindow.__init__(self)\n#         self.ui = ui_layout\n#\n#     def AboutAct(self):\n#         # self.statusMessage(self, message=\"Learn about Sabre2\")\n#\n#         # Program information\n#         version = \"3.0\"\n#         website = \"http://www.white.ce.gatech.edu/sabre\"\n#         email = \"fill in data\"\n#         license_link = \"fill in data\"\n#         license_name = \"fill in data\"\n#\n#         # Dialog box\n#         about_box = SABRE2_GUI.QtGui.QMessageBox()\n#         about_box.setWindowTitle(\"About Sabre2 Version 3.0\")\n#         about_box.setTextFormat(SABRE2_GUI.QtCore.Qt.RichText)\n#         # about_box.setIconPixmap(QtGui.QPixmap(ComicTaggerSettings.getGraphic('about.png'))) #include image\n#         about_box.setText(\"\"\"\n#         <HTML>\n#         <p><b>This demo shows use of <c>QTableWidget</c> with custom handling for\n#          individual cells.</b></p>\n#         <p>Using a customized table item we make it possible to have dynamic\n#          output in different cells. The content that is implemented for this\n#          particular demo is:\n#         <ul>\n#         <li>Adding two cells.</li>\n#         <li>Subtracting one cell from another.</li>\n#         <li>Multiplying two cells.</li>\n#         <li>Dividing one cell with another.</li>\n#              <li>Summing the contents of an arbitrary number of cells.</li>\n#              </HTML>\n#          \"\"\")\n#         about_box.setStandardButtons(SABRE2_GUI.QtGui.QMessageBox.Ok)\n#         about_box.exec_()\n#\n#     def NewAct(self):\n#         DropDownActions.ActionClass.statusMessage(self, message=\"Create a new file\")\n#\n#         fileName = []\n#         inpdata = []\n#         # clear all user inputs\n#         # reset OpenGL screen\n#         # reset messages\n#\n#     def OpenAct(self):\n#         DropDownActions.ActionClass.statusMessage(self, message=\"Open an existing file\")\n#         fileName = PyQt4.QtGui.QFileDialog.getOpenFileName(None, \"Open Sabre2 File\", '',\n#                                                            \"Sabre2 Files (*.mat);;All Files (*)\")\n#         if not fileName:\n#             return\n#         try:\n#             in_file = open(str(fileName), 'rb')\n#         except IOError:\n#             QtGui.QMessageBox.information(self, \"Unable to open file\", \"There was an error opening \\\"%s\\\"\" % fileName)\n#             return\n#\n#         #if first line states \"basic\" script\n#         # then just fill in gui\n#         #elif first line states \"complete\" script\n#         # if autorun = \"enabled\"\n#         #   then immediately run and show results\n#         # elif autorun = \"disabled\"\n#         #   then fill in gui, pull up analysis tab and update opengl\n#\n#         inpdata = []\n#         inpdata = pickle.load(in_file)\n#         in_file.close()\n#\n#         if len(inpdata) == 0:\n#             QtGui.QMessageBox.information(self, \"File is empty\")\n#         else:\n#             # needs to be updated once data structure is determined**************************\n#             for name, address in inpdata:\n#                 self.nameLine.setText(name)\n#                 self.addressText.setText(address)\n#\n#         self.updateInterface(self.NavigationMode)\n#\n#         # Fill in spread sheet cells\n#         # update OpenGL screen\n#         # update messages\n#         # go directly to analysis screen\n#\n#     def SaveAct(self):\n#         DropDownActions.ActionClass.statusMessage(self, message=\"Save the model to disk\")\n#\n#         inpdata = \"text test addon\"\n#         fileName = \"test1.txt\"\n#\n#         if len(inpdata) == 0:\n#             QtGui.QMessageBox.information(self, \"No data has been attributed to the model\")\n#         else:\n#             try:\n#                 fileName\n#             except NameError:  # if data has not been saved to a file yet invoke popup save screen\n#                 import pickle\n#                 fileName = PyQt4.QtGui.QFileDialog.getSaveFileName(None, \"Save Sabre2 File\", '',\n#                                                                    \"Sabre2 File (*.mat);;All Files (*)\")\n#                 if not fileName:\n#                     return\n#                 try:\n#                     out_file = open(str(fileName), 'wb')\n#                 except IOError:\n#                     PyQt4.QtGui.QMessageBox.information(self, \"Unable to open file\",\n#                                                         \"There was an error opening \\\"%s\\\"\" % fileName)\n#                     return\n#\n#                 pickle.dump(inpdata, out_file)\n#                 out_file.close()\n#             else:\n#                 import pickle\n#                 try:  # if file already exists skip popup and update save file\n#                     out_file = open(str(fileName), 'wb')\n#                 except IOError:\n#                     PyQt4.QtGui.QMessageBox.information(self, \"Unable to open file\",\n#                                                         \"There was an error opening \\\"%s\\\"\" % fileName)\n#                     return\n#\n#                 pickle.dump(inpdata, out_file)\n#                 out_file.close()\n#\n#     def Save_AsAct(self):\n#         DropDownActions.ActionClass.statusMessage(self, message=\"Name the file saved to disk\")\n#\n#         inpdata = \"text test\"\n#\n#         # Invoke save popup screen\n#         if len(inpdata) == 0:\n#             QtGui.QMessageBox.information(self, \"No data has been attributed to the model\")\n#         else:\n#             import pickle\n#             fileName = PyQt4.QtGui.QFileDialog.getSaveFileName(None, \"Save Sabre2 File As\", '',\n#                                                                \"Sabre2 File (*.mat);;All Files (*)\")\n#             if not fileName:\n#                 return\n#             try:\n#                 out_file = open(str(fileName), 'wb')\n#             except IOError:\n#                 PyQt4.QtGui.QMessageBox.information(self, \"Unable to open file\",\n#                                                     \"There was an error opening \\\"%s\\\"\" % fileName)\n#                 return\n#\n#             pickle.dump(inpdata, out_file)\n#             out_file.close()\n#\n#     def PrintAct(self):\n#         DropDownActions.ActionClass.statusMessage(self, message=\"Print screen\")\n#\n#         # not sure what we are printing?\n#         # data, results, or just screenshot of OpenGL?\n#\n#     def Print_PreviewAct(self):\n#         DropDownActions.ActionClass.statusMessage(self, message=\"Preview screen print\")\n#\n#     def statusMessage(self, message):\n#         self.ui.statusBar.showMessage(message)\n#\n#     # def maybeSave(self):\n#     #     if self.textEdit.document().isModified():\n#     #         ret = QtGui.QMessageBox.warning(self, \"Application\",\n#     #                                         \"The model has been modified.\\nDo you want to save \"\n#     #                                         \"your changes?\",\n#     #                                         QtGui.QMessageBox.Save | QtGui.QMessageBox.Discard |\n#     #                                         QtGui.QMessageBox.Cancel)\n#     #         if ret == QtGui.QMessageBox.Save:\n#     #             return self.save()\n#     #         elif ret == QtGui.QMessageBox.Cancel:\n#     #             return False\n#     #     return True\n#\n\nclass DataCollection(QMainWindow):\n    \"\"\"docstring for Actions\"\"\"\n\n    def __init__(self, ui_layout):\n        QMainWindow.__init__(self)\n        self.ui = ui_layout\n        self.ActionMenus = DropDownActions.ActionClass(ui_layout)\n\n    def Assign_comboBox(self, tableName, options, position, current_index = None):\n        r = tableName.rowCount()\n        for i in range(r):\n            # print('i = ', i)\n            combo_box = QtGui.QComboBox()\n            for t in options:\n                combo_box.addItem(t)\n            tableName.setCellWidget(i, position, combo_box)\n            if current_index is not None:\n                combo_box.setCurrentIndex(current_index)\n                combo_box.currentIndexChanged.connect(\n                    lambda: SABRE2_main_subclass.update_members_table(self, tableName, position))\n\n                combo_box.currentIndexChanged.connect(\n                    lambda: SABRE2_main_subclass.OpenGLwidget.updateTheWidget())\n\n                combo_box.currentIndexChanged.connect(\n                    lambda:SABRE2_main_subclass.OpenGLwidget.resizeGL(SABRE2_main_subclass.OpenGLwidget.width(),\n                                                   SABRE2_main_subclass.OpenGLwidget.height()))\n\n    def update_table_values(self, tableName, position):\n        col = tableName.currentColumn()\n        row = tableName.currentRow()\n        row_check = tableName.rowCount()\n        col_check = tableName.columnCount()\n        val1 = np.zeros((row_check, col_check))\n        val2 = np.zeros((row_check, col_check))\n        val2[:, 3] = 2\n        flag_mem_value = np.zeros((row_check,2))\n\n        if row == -1:\n            pass\n\n        else:\n\n            try:\n                for i in range(row_check):\n                    for j in range(col_check):\n                        if tableName.item(i, j) is None:\n                            pass\n                        elif j == position:\n                            # print(i)\n                            if tableName.cellWidget(i, position) is None:\n                                val1[i, position] = 0\n                                DropDownActions.ActionClass.statusMessage(self, message=\"New row added!\")\n                            else:\n                                value_combo = tableName.cellWidget(i, position).currentIndex()\n                                val1[i, position] = value_combo\n                                DropDownActions.ActionClass.statusMessage(self, message=\"\")\n                        else:\n                            if col == 1 or col == 2:\n                                val1[i, j] = float(tableName.item(i, j).text())\n                                val2[i, j] = 2\n                                pass\n\n                            elif tableName.item(row, 1) is None:\n                                tableName.clearSelection()\n                                tableName.item(row, col).setText(\"0\")\n                                DropDownActions.ActionClass.statusMessage(self, message=\"Please select joint i!\")\n                                self.ui.Members_tabs.setCurrentIndex(0)\n\n                            elif tableName.item(row, 2) is None:\n                                tableName.clearSelection()\n                                tableName.item(row, col).setText(\"0\")\n                                DropDownActions.ActionClass.statusMessage(self, message=\"Please select joints j!\")\n                                self.ui.Members_tabs.setCurrentIndex(0)\n                            else:\n                                val1[i, j] = float(tableName.item(i, j).text())\n                                val2[i, j] = 2\n                                DropDownActions.ActionClass.statusMessage(self, message=\"\")\n            except ValueError:\n                tableName.clearSelection()\n                tableName.item(row, col).setText(\"0\")\n                self.ui.Members_tabs.setCurrentIndex(1)\n                DropDownActions.ActionClass.statusMessage(self, message=\"Please enter only numbers in this cell!\")\n\n        if 0 in val2:\n            self.ui.Member_Properties_Table.setEnabled(False)\n        else:\n            self.ui.Member_Properties_Table.setEnabled(True)\n            DropDownActions.ActionClass.statusMessage(self, message=\"Member Defined\")\n\n        val4 = np.delete(val2,(0,1,2,3), axis = 1)\n\n        flag_mem_value[:,0] = val1[:,0]\n        for i in range(int(row_check)):\n            if 0 in val4[i, :]:\n                flag_mem_value[i][1] = 0\n            else:\n                flag_mem_value[i][1] = 1\n\n\n        def unique(a):\n            b = [a[i] for i in sorted(np.unique(a, axis=0, return_index=True)[1])]\n            return b\n\n        if row_check == 1:\n            pass\n        else:\n            if col == 1 or col == 2:\n                val3 = val1[:, (1, 2)]\n                val_uniq = unique(val3)\n                if np.array_equal(val3, val_uniq):\n                    pass\n                else:\n                    tableName.clearSelection()\n                    tableName.item(row, col).setText(\"0\")\n                    DropDownActions.ActionClass.statusMessage(self, message=\"The Member has been defined before!\")\n                    self.ui.Members_tabs.setCurrentIndex(0)\n        return val1, row, col,flag_mem_value\n\n    def update_lineedit_values(self, lineName):\n        try:\n            val2 = [];\n            val2 = int(lineName.text())\n            # print(\"val2\", val2)\n        except ValueError:\n            lineName.setText(\"\")\n            DropDownActions.ActionClass.statusMessage(self, message=\"Please enter only numbers in this cell!\")\n        return val2\n\n\nclass TableChanges(QMainWindow):\n    \"\"\"This Class is imposing the changes on the Definition Tables\"\"\"\n\n    def __init__(self, ui_layout):\n        QMainWindow.__init__(self)\n        self.ui = ui_layout\n        self.ActionMenus = DropDownActions.ActionClass(ui_layout)\n\n    def add_new_row(self, tableName, options, position, lineName, flag, combo_values=None):\n        # print('add_new_row')\n        def add_new_row_application(self,tableName, options, position, lineName, flag, combo_values=None):\n            \"\"\"nested function for application of added node\"\"\"\n            combo_box = QtGui.QComboBox()\n            if flag == \"last\":\n                tableName.insertRow(row_position)\n\n                val = 0\n                item = QTableWidgetItem(str(val))\n                tableName.setItem(row_position, position, item)\n                for t in options:\n                    combo_box.addItem(t)\n                # print('combo box value = ', combo_values)\n                tableName.setCellWidget(row_position, position, combo_box)\n                if combo_values is None:\n                    pass\n                else:\n                    member_count = combo_values.shape[0]\n                    if member_count > row_position:\n                        combo_box.setCurrentIndex(combo_values[row_position-1])\n                        combo_box.currentIndexChanged.connect(\n                            lambda: SABRE2_main_subclass.update_members_table(self, tableName, position))\n\n                        combo_box.currentIndexChanged.connect(\n                            lambda: SABRE2_main_subclass.OpenGLwidget.updateTheWidget())\n\n                        combo_box.currentIndexChanged.connect(\n                            lambda: SABRE2_main_subclass.OpenGLwidget.resizeGL(\n                                SABRE2_main_subclass.OpenGLwidget.width(),\n                                SABRE2_main_subclass.OpenGLwidget.height()))\n\n                item1 = QTableWidgetItem(str(row_position + 1))\n                item1.setTextAlignment(QtCore.Qt.AlignCenter)\n                item1.setFlags(QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsUserCheckable)\n                tableName.setItem(row_position, 0, item1)\n            else:\n                row_number = DataCollection.update_lineedit_values(self, lineName)\n                tableName.insertRow(row_number)\n                val = 0\n\n                item = QTableWidgetItem(str(val))\n                tableName.setItem(row_number, position, item)\n\n                for i in range(row_position + 2):\n                    item = QTableWidgetItem(str(i + 1))\n                    item.setTextAlignment(QtCore.Qt.AlignCenter)\n                    item.setFlags(QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsUserCheckable)\n                    tableName.setItem(i, 0, item)\n\n                for t in options:\n\n                    combo_box.addItem(t)\n\n                tableName.setCellWidget(row_number, position, combo_box)\n\n            combo_box.currentIndexChanged.connect(\n                lambda: SABRE2_main_subclass.update_members_table(self, tableName, position))\n\n            combo_box.currentIndexChanged.connect(\n                lambda: SABRE2_main_subclass.OpenGLwidget.updateTheWidget())\n\n            combo_box.currentIndexChanged.connect(\n                lambda: SABRE2_main_subclass.OpenGLwidget.resizeGL(\n                    SABRE2_main_subclass.OpenGLwidget.width(),\n                    SABRE2_main_subclass.OpenGLwidget.height()))\n        row_position = tableName.rowCount()\n\n        if combo_values is not None:\n            member_count = combo_values.shape[0]\n            if member_count > row_position:\n                add_new_row_application(self, tableName, options, position, lineName, flag, combo_values=None)\n        else:\n            add_new_row_application(self, tableName, options, position, lineName, flag, combo_values=None)\n\n    def delete_row(self, tableName, lineName, flag):\n        row_position = tableName.rowCount()\n        if flag == \"last\":\n            if row_position == 1:\n                pass\n            else:\n                tableName.removeRow(row_position - 1)\n        else:\n            row_number = DataCollection.update_lineedit_values(self, lineName)\n            tableName.removeRow(row_number - 1)\n\n            for i in range(row_position + 2):\n                item = QTableWidgetItem(str(i + 1))\n                item.setTextAlignment(QtCore.Qt.AlignCenter)\n                item.setFlags(QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsUserCheckable)\n                tableName.setItem(i, 0, item)\n\n        DataCollection.update_table_values(self, tableName, 3)\n\n\nclass LineChanges(QMainWindow):\n    \"\"\"This Class is imposing the changes on the QLineEdit cells\"\"\"\n\n    def __init__(self, ui_layout):\n        QMainWindow.__init__(self)\n        self.ui = ui_layout\n        self.ActionMenus = DropDownActions.ActionClass(ui_layout)\n\n    def copy_insert_row(self, tableName, options, position, Copy_from_number, Insert_after_number):\n        tableName.blockSignals(True)\n        Members_values, current_row, _ ,_= DataCollection.update_table_values(self, tableName, position)\n        copyfrom_values = DataCollection.update_lineedit_values(self, Copy_from_number)\n        insertafter_values = DataCollection.update_lineedit_values(self, Insert_after_number)\n        row_position = tableName.rowCount()\n\n        np.insert(Members_values, insertafter_values, Members_values[(copyfrom_values - 1), :], axis=0)\n\n        column_count = tableName.columnCount()\n        tableName.insertRow(insertafter_values)\n        for j in range(column_count):\n            if j == 0 or j == 1 or j == 2:\n                pass\n            elif j == position:\n                combo_box = QtGui.QComboBox()\n                for t in options:\n                    combo_box.addItem(t)\n                tableName.setCellWidget(insertafter_values, position, combo_box)\n                combo_box.currentIndexChanged.connect(\n                    lambda: SABRE2_main_subclass.update_members_table(self, tableName, position))\n                copied_index = tableName.cellWidget(copyfrom_values, position).currentIndex()\n                tableName.cellWidget(insertafter_values, position).setCurrentIndex(copied_index)\n            else:\n                val = Members_values[copyfrom_values - 1, j]\n                item = QTableWidgetItem(str(val))\n                tableName.setItem(insertafter_values, j, item)\n\n        for i in range(row_position + 2):\n            item = QTableWidgetItem(str(i + 1))\n            item.setTextAlignment(QtCore.Qt.AlignCenter)\n            item.setFlags(QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsUserCheckable)\n            tableName.setItem(i, 0, item)\n        tableName.blockSignals(False)\n\n    def set_member_definition_AISC_combobox(self, ui_layout):\n        ''' This function sets the combobox for the AISC database'''\n\n        cross_sections = [\"W44X335\", \"W44X290\", \"W44X262\", \"W44X230\", \"W40X593\", \"W40X503\", \"W40X431\", \"W40X397\",\n                          \"W40X372\", \"W40X362\", \"W40X324\", \"W40X297\", \"W40X277\", \"W40X249\", \"W40X215\", \"W40X199\",\n                          \"W40X392\", \"W40X331\", \"W40X327\", \"W40X294\", \"W40X278\", \"W40X264\", \"W40X235\", \"W40X211\",\n                          \"W40X183\", \"W40X167\", \"W40X149\", \"W36X652\", \"W36X529\", \"W36X487\", \"W36X441\", \"W36X395\",\n                          \"W36X361\", \"W36X330\", \"W36X302\", \"W36X282\", \"W36X262\", \"W36X247\", \"W36X231\", \"W36X256\",\n                          \"W36X232\", \"W36X210\", \"W36X194\", \"W36X182\", \"W36X170\", \"W36X160\", \"W36X150\", \"W36X135\",\n                          \"W33X387\", \"W33X354\", \"W33X318\", \"W33X291\", \"W33X263\", \"W33X241\", \"W33X221\", \"W33X201\",\n                          \"W33X169\", \"W33X152\", \"W33X141\", \"W33X130\", \"W33X118\", \"W30X391\", \"W30X357\", \"W30X326\",\n                          \"W30X292\", \"W30X261\", \"W30X235\", \"W30X211\", \"W30X191\", \"W30X173\", \"W30X148\", \"W30X132\",\n                          \"W30X124\", \"W30X116\", \"W30X108\", \"W30X99\", \"W30X90\", \"W27X539\", \"W27X368\", \"W27X336\",\n                          \"W27X307\", \"W27X281\", \"W27X258\", \"W27X235\", \"W27X217\", \"W27X194\", \"W27X178\", \"W27X161\",\n                          \"W27X146\", \"W27X129\", \"W27X114\", \"W27X102\", \"W27X94\", \"W27X84\", \"W24X370\", \"W24X335\",\n                          \"W24X306\", \"W24X279\", \"W24X250\", \"W24X229\", \"W24X207\", \"W24X192\", \"W24X176\", \"W24X162\",\n                          \"W24X146\", \"W24X131\", \"W24X117\", \"W24X104\", \"W24X103\", \"W24X94\", \"W24X84\", \"W24X76\",\n                          \"W24X68\", \"W24X62\", \"W24X55\", \"W21X201\", \"W21X182\", \"W21X166\", \"W21X147\", \"W21X132\",\n                          \"W21X122\", \"W21X111\", \"W21X101\", \"W21X93\", \"W21X83\", \"W21X73\", \"W21X68\", \"W21X62\",\n                          \"W21X55\", \"W21X48\", \"W21X57\", \"W21X50\", \"W21X44\", \"W18X311\", \"W18X283\", \"W18X258\",\n                          \"W18X234\", \"W18X211\", \"W18X192\", \"W18X175\", \"W18X158\", \"W18X143\", \"W18X130\", \"W18X119\",\n                          \"W18X106\", \"W18X97\", \"W18X86\", \"W18X76\", \"W18X71\", \"W18X65\", \"W18X60\", \"W18X55\",\n                          \"W18X50\", \"W18X46\", \"W18X40\", \"W18X35\", \"W16X100\", \"W16X89\", \"W16X77\", \"W16X67\",\n                          \"W16X57\", \"W16X50\", \"W16X45\", \"W16X40\", \"W16X36\", \"W16X31\", \"W16X26\", \"W14X730\",\n                          \"W14X665\", \"W14X605\", \"W14X550\", \"W14X500\", \"W14X455\", \"W14X426\", \"W14X398\", \"W14X370\",\n                          \"W14X342\", \"W14X311\", \"W14X283\", \"W14X257\", \"W14X233\", \"W14X211\", \"W14X193\", \"W14X176\",\n                          \"W14X159\", \"W14X145\", \"W14X132\", \"W14X120\", \"W14X109\", \"W14X99\", \"W14X90\", \"W14X82\",\n                          \"W14X74\", \"W14X68\", \"W14X61\", \"W14X53\", \"W14X48\", \"W14X43\", \"W14X38\", \"W14X34\",\n                          \"W14X30\", \"W14X26\", \"W14X22\", \"W12X336\", \"W12X305\", \"W12X279\", \"W12X252\", \"W12X230\",\n                          \"W12X210\", \"W12X190\", \"W12X170\", \"W12X152\", \"W12X136\", \"W12X120\", \"W12X106\", \"W12X96\",\n                          \"W12X87\", \"W12X79\", \"W12X72\", \"W12X65\", \"W12X58\", \"W12X53\", \"W12X50\", \"W12X45\",\n                          \"W12X40\", \"W12X35\", \"W12X30\", \"W12X26\", \"W12X22\", \"W12X19\", \"W12X16\", \"W12X14\",\n                          \"W10X112\", \"W10X100\", \"W10X88\", \"W10X77\", \"W10X68\", \"W10X60\", \"W10X54\", \"W10X49\",\n                          \"W10X45\", \"W10X39\", \"W10X33\", \"W10X30\", \"W10X26\", \"W10X22\", \"W10X19\", \"W10X17\",\n                          \"W10X15\", \"W10X12\", \"W8X67\", \"W8X58\", \"W8X48\", \"W8X40\", \"W8X35\", \"W8X31\",\n                          \"W8X28\", \"W8X24\", \"W8X21\", \"W8X18\", \"W8X15\", \"W8X13\", \"W8X10\", \"W6X25\",\n                          \"W6X20\", \"W6X15\", \"W6X16\", \"W6X12\", \"W6X9\", \"W6X8.5\", \"W5X19\", \"W5X16\", \"W4X13\"]\n        for t in cross_sections:\n            ui_layout.AISC_database_button.addItem(t)\n            ui_layout.AISC_database_button_2.addItem(t)\n\n    def sql_print(self, tableName):\n        tableName.blockSignals(True)\n        conn = sq.connect('AISC_data.db')\n        c = conn.cursor()\n\n        row = tableName.currentRow()\n        row_i = tableName.item(row, 1)\n        row_j = tableName.item(row, 2)\n        # print(\"row, i j = \", row_i, row_j)\n        row_count = tableName.rowCount()\n        cross_section = str(self.ui.AISC_database_button.currentText())\n        try:\n            if row == -1:\n                DropDownActions.ActionClass.statusMessage(self, message=\"Select the row before assignment\")\n            elif row_i is None:\n                DropDownActions.ActionClass.statusMessage(self,\n                                                          message=\"Please select the joints before assigning the cross-section properties!\")\n            elif row_j is None:\n                DropDownActions.ActionClass.statusMessage(self,\n                                                          message=\"Please select the joints before assigning the cross-section properties!\")\n            else:\n                try:\n                    variable_names = [\"bf\", \"tf\", \"d\", \"tw\", \"A\", \"W\", \"Ix\", \"Zx\", \"Sx\", \"rx\", \"Iy\", \"Zy\", \"Sy\", \"ry\",\n                                      \"J\",\n                                      \"Cw\", \"dw\", \"Afillet\"]\n\n                    table_prop = np.zeros((1, 18))\n\n                    for i in range(len(variable_names)):\n                        c.execute('SELECT ' + variable_names[i] + ' FROM records WHERE \"AISC_Manual_Label\" = ?',\n                                  (cross_section,))\n                        var1 = c.fetchall()\n                        var1 = var1[0]\n                        table_prop[0, i] = var1[0]\n                    # print(cross_section, 'cs_properties = ', table_prop)\n                    # table values assignment\n                    Massemble = np.zeros((1, 16))\n                    Massemble[0][3] = 1\n                    Massemble[0][4] = table_prop[0, 4]\n                    Massemble[0][5] = table_prop[0, 5]\n                    Massemble[0][6] = table_prop[0, 6]\n                    Massemble[0][7] = table_prop[0, 7]\n                    Massemble[0][8] = table_prop[0, 8]\n                    Massemble[0][9] = table_prop[0, 9]\n                    Massemble[0][10] = table_prop[0, 10]\n                    Massemble[0][11] = table_prop[0, 11]\n                    Massemble[0][12] = table_prop[0, 12]\n                    Massemble[0][13] = table_prop[0, 13]\n                    Massemble[0][14] = table_prop[0, 14]\n                    Massemble[0][15] = table_prop[0, 15]\n\n                    for i in range(4, 18):\n                        if i == 4 or i == 6 or i == 8 or i == 10:\n                            tableName.setItem(row, i, QTableWidgetItem(str(table_prop[0, 0])))\n                        elif i == 5 or i == 7 or i == 9 or i == 11:\n                            tableName.setItem(row, i, QTableWidgetItem(str(table_prop[0, 1])))\n                        elif i == 12 or i == 14:\n                            tableName.setItem(row, i, QTableWidgetItem(str(table_prop[0, 16])))\n                        elif i == 13 or i == 15:\n                            tableName.setItem(row, i, QTableWidgetItem(str(table_prop[0, 3])))\n                        elif i == 16:\n                            tableName.setItem(row, i, QTableWidgetItem(str(table_prop[0, 17])))\n                        else:\n                            tableName.blockSignals(False)\n                            tableName.setItem(row, i, QTableWidgetItem(str(table_prop[0, 17])))\n\n                    return Massemble, row, row_count, table_prop\n                except IndexError:\n                    DropDownActions.ActionClass.statusMessage(self, message=\"Please select the cross-section name!\")\n        except TypeError:\n            tableName.item(row, 4).setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)\n            DropDownActions.ActionClass.statusMessage(self,\n                                                      message=\"Please select the joints before assigning the cross-section properties!\")\n\n\nclass JointTable(QMainWindow):\n    \"\"\"This Class is imposing the changes on the QLineEdit cells\"\"\"\n\n    def __init__(self, ui_layout):\n        QMainWindow.__init__(self)\n        self.ui = ui_layout\n        self.ActionMenus = DropDownActions.ActionClass(ui_layout)\n\n    def tableValues(self, tableName):\n        # print(tableName)\n        col = tableName.currentColumn()\n        row = tableName.currentRow()\n        row_check = tableName.rowCount()\n        col_check = tableName.columnCount()\n        val1 = np.zeros((row_check, col_check))\n        val2 = np.zeros((row_check, col_check))\n        # print(row_check)\n        try:\n            for i in range(row_check):\n                for j in range(col_check):\n                    if tableName.item(i, j) is None:\n                        pass\n                    elif tableName == self.ui.Member_Properties_Table and j == 0:\n                        pass\n                    else:\n                        val1[i, j] = float(tableName.item(i, j).text())\n                        val2[i, j] = 2\n\n                        # ActionClass.statusMessage(self, message=\"\")\n\n\n        except ValueError:\n            tableName.clearSelection()\n            tableName.item(row, col).setText('0')\n        if tableName != self.ui.Member_Properties_Table:\n            if 0 in val2:\n                self.ui.Members_tab.setEnabled(False)\n            else:\n                self.ui.Members_tab.setEnabled(True)\n\n                val_unique = np.delete(val1, [0], axis=1)\n                val_unique, indices = np.unique(val_unique, axis=0, return_index=True)\n                # print('val_unique = ', val_unique, 'indices = ', indices)\n                try:\n                    for i in range(val1.shape[0]):\n                        if i in range(indices.shape[0]):\n                            DropDownActions.ActionClass.statusMessage(self, message=\"\")\n                        else:\n                            DropDownActions.ActionClass.statusMessage(self,\n                                                                      message=\"Same location cannot be defined twice!\")\n                            tableName.clearSelection()\n                            tableName.item(row, col).setText('0')\n                except AttributeError:\n                    DropDownActions.ActionClass.statusMessage(self, message=\"\")\n\n            # ActionClass.statusMessage(self, message=\"Please enter only numbers in the cell!\")\n        # print(\"val1\", val1)\n        return val1\n\n    def add_new_row(self, tableName, lineName, flag):\n        row_position = tableName.rowCount()\n\n        if flag == \"last\":\n\n            tableName.insertRow(row_position)\n            item = QTableWidgetItem(str(row_position + 1))\n            item.setTextAlignment(QtCore.Qt.AlignCenter)\n            item.setFlags(QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsUserCheckable)\n            tableName.setItem(row_position, 0, item)\n\n            item1 = QTableWidgetItem(\"0\")\n            item1.setTextAlignment(QtCore.Qt.AlignCenter)\n            item1.setFlags(QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsUserCheckable)\n            tableName.setItem(row_position, 3, item1)\n\n\n\n        else:\n            row_number = DataCollection.update_lineedit_values(self, lineName)\n            tableName.insertRow(row_number)\n            for i in range(row_position + 2):\n                item = QTableWidgetItem(str(i + 1))\n                item.setTextAlignment(QtCore.Qt.AlignCenter)\n                item.setFlags(QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsUserCheckable)\n                tableName.setItem(i, 0, item)\n\n                item1 = QTableWidgetItem(\"0\")\n                item1.setTextAlignment(QtCore.Qt.AlignCenter)\n                item1.setFlags(QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsUserCheckable)\n                tableName.setItem(i, 3, item1)\n\n    def delete_row(self, tableName, lineName, flag):\n        row_position = tableName.rowCount()\n        if row_position == 1:\n            DropDownActions.ActionClass.statusMessage(self, message=\"First row cannot be deleted!\")\n        elif flag == \"last\":\n            tableName.removeRow(row_position - 1)\n        else:\n            row_number = DataCollection.update_lineedit_values(self, lineName)\n            tableName.removeRow(row_number - 1)\n            for i in range(row_position + 2):\n                item = QTableWidgetItem(str(i + 1))\n                item.setTextAlignment(QtCore.Qt.AlignCenter)\n                item.setFlags(QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsUserCheckable)\n                tableName.setItem(i, 0, item)\n\n\nclass MemberPropertiesTable(QMainWindow):\n    ''' This class is for setting the properties of Member Properties Table '''\n\n    def __init__(self, ui_layout):\n        QMainWindow.__init__(self)\n        self.ui = ui_layout\n        self.ActionMenus = DropDownActions.ActionClass(ui_layout)\n\n    def set_number_of_rows(self, memberDefinitionTable, memberPropertiesTable):\n        ''' this function sets the initial configuration of the member properties table after added nodes'''\n\n        memberPropertiesTable.blockSignals(True)\n        current_column = self.ui.Members_table.currentColumn()\n        if current_column == 1 or current_column == 2:\n            SNodevalue = h5_file.h5_Class.read_array(self,'SNodevalue')\n            # print('SNode in set rows = ', SNodevalue)\n            initial_values = np.zeros((int(SNodevalue.shape[0]*SNodevalue.shape[1]),11))\n            q = 0\n\n            for i in range(int(SNodevalue.shape[0])):\n                for j in range(int(SNodevalue.shape[1])):\n                    initial_values[q,:] = SNodevalue[i,j,:]\n                    q +=1\n\n            # print('initial values 1 = ', initial_values)\n            row_member = memberPropertiesTable.rowCount()\n            row_def = memberDefinitionTable.rowCount()\n\n            added_node_information = h5_file.h5_Class.read_array(self, 'added_node_information')\n            # print('added = ', added_node_information)\n            if row_def != row_member:\n                memberPropertiesTable.setRowCount(row_def)\n\n            if added_node_information.shape[0] < row_def:\n                for j in range(row_def):\n                    text = 'M' + str(j+1) + 'S1'\n                    item = QTableWidgetItem(text)\n                    item.setTextAlignment(QtCore.Qt.AlignCenter)\n                    item.setFlags(QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsUserCheckable)\n                    memberPropertiesTable.setItem(j, 0, item)\n                        # initial_values = JointTable.tableValues(self, memberPropertiesTable)\n\n                # print('initial_values in if = ', initial_values)\n                for i in range(1, 8):\n                    for j in range(row_def):\n                        # print('j in if = ', j, 'i in if = ', i)\n                        if i == 1 :\n                            item = QTableWidgetItem(str(4))\n                            item.setTextAlignment(QtCore.Qt.AlignCenter)\n                            memberPropertiesTable.setItem(j, i, item)\n                        elif i == 2 or i == 3 or i == 4:\n                            item = QTableWidgetItem(str(int(initial_values[j-1, i + 1])))\n                            item.setTextAlignment(QtCore.Qt.AlignCenter)\n                            memberPropertiesTable.setItem(j, i, item)\n                        elif i == 5 or i == 6 or i == 7:\n                            item = QTableWidgetItem(str(int(initial_values[j-1, i + 2])))\n                            item.setTextAlignment(QtCore.Qt.AlignCenter)\n                            memberPropertiesTable.setItem(j, i, item)\n\n            else:\n                total_number_row = np.sum(added_node_information[:, 1])\n                row_def = int(total_number_row) + int(row_def)\n                memberPropertiesTable.setRowCount(row_def)\n                k = 0\n                for i in range(int(added_node_information[:,0].shape[0])):\n                    if added_node_information[i][1] == 0:\n                        text = 'M' + str(i + 1) + 'S1'\n                        item = QTableWidgetItem(text)\n                        item.setTextAlignment(QtCore.Qt.AlignCenter)\n                        item.setFlags(QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsUserCheckable)\n                        memberPropertiesTable.setItem(k, 0, item)\n                        k += 1\n                    else:\n                        for j in range(int(added_node_information[i][1])+1):\n                            text = 'M' + str(i+1) + 'S' + str(j+1)\n                            item = QTableWidgetItem(text)\n                            item.setTextAlignment(QtCore.Qt.AlignCenter)\n                            item.setFlags(QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsUserCheckable)\n                            memberPropertiesTable.setItem(k, 0, item)\n\n                            k += 1\n                    for i in range(1, 8):\n                        for j in range(row_def):\n                            # print('j in else = ', j, 'i in else = ', i)\n                            # print('initial values shape = ', initial_values.shape[0], j)\n                            if j >= initial_values.shape[0]:\n                                if i == 1:\n                                    item = QTableWidgetItem(str(int(initial_values[j-1, i + 1])))\n                                    item.setTextAlignment(QtCore.Qt.AlignCenter)\n                                    memberPropertiesTable.setItem(j, i, item)\n                                elif i == 2 or i == 3:\n                                    item = QTableWidgetItem(str(int(initial_values[j-1, i + 1])))\n                                    item.setTextAlignment(QtCore.Qt.AlignCenter)\n                                    memberPropertiesTable.setItem(j, i, item)\n                                elif i ==4 or i == 5 or i == 6 or i == 7:\n                                    item = QTableWidgetItem(str((initial_values[j-1, i + 2])))\n                                    item.setTextAlignment(QtCore.Qt.AlignCenter)\n                                    memberPropertiesTable.setItem(j, i, item)\n                            elif j ==(row_def - 1) and initial_values[j,i+1] == 0:\n                                if i == 1:\n                                    item = QTableWidgetItem(str(4))\n                                    item.setTextAlignment(QtCore.Qt.AlignCenter)\n                                    memberPropertiesTable.setItem(j, i, item)\n                                elif i == 2:\n                                    item = QTableWidgetItem(str(29000))\n                                    item.setTextAlignment(QtCore.Qt.AlignCenter)\n                                    memberPropertiesTable.setItem(j, i, item)\n                                elif i == 3:\n                                    item = QTableWidgetItem(str(11200))\n                                    item.setTextAlignment(QtCore.Qt.AlignCenter)\n                                    memberPropertiesTable.setItem(j, i, item)\n                                elif i == 4:\n                                    item = QTableWidgetItem(str(0.00034028))\n                                    item.setTextAlignment(QtCore.Qt.AlignCenter)\n                                    memberPropertiesTable.setItem(j, i, item)\n                                elif i == 5 or i == 6 or i == 7:\n                                    item = QTableWidgetItem(str(50))\n                                    item.setTextAlignment(QtCore.Qt.AlignCenter)\n                                    memberPropertiesTable.setItem(j, i, item)\n                            else:\n                                if i == 1:\n                                    item = QTableWidgetItem(str(int(initial_values[j, i + 1])))\n                                    item.setTextAlignment(QtCore.Qt.AlignCenter)\n                                    memberPropertiesTable.setItem(j, i, item)\n                                elif i == 2 or i == 3:\n                                    item = QTableWidgetItem(str(int(initial_values[j, i + 1])))\n                                    item.setTextAlignment(QtCore.Qt.AlignCenter)\n                                    memberPropertiesTable.setItem(j, i, item)\n                                elif i ==4 or i == 5 or i == 6 or i == 7:\n                                    item = QTableWidgetItem(str((initial_values[j, i + 2])))\n                                    item.setTextAlignment(QtCore.Qt.AlignCenter)\n                                    memberPropertiesTable.setItem(j, i, item)\n\n        memberPropertiesTable.blockSignals(False)\n\n    def set_values_with_row(self, memberPropertiesTable, member_prop_line_edit):\n        row_count = memberPropertiesTable.rowCount()\n        copyfrom_values = DataCollection.update_lineedit_values(self, member_prop_line_edit)\n        initial_values = np.zeros((1, 8))\n        for k in range(1,8):\n            initial_values[0, k] = float(memberPropertiesTable.item(copyfrom_values - 1, k).text())\n        for i in range(8):\n            for j in range(row_count):\n                if i == 0:\n                    pass\n                elif i == 4:\n                    item = QTableWidgetItem(str(initial_values[0, i]))\n                    item.setTextAlignment(QtCore.Qt.AlignCenter)\n                    memberPropertiesTable.setItem(j, i, item)\n                else:\n                    item = QTableWidgetItem(str(int(initial_values[0, i])))\n                    item.setTextAlignment(QtCore.Qt.AlignCenter)\n                    memberPropertiesTable.setItem(j, i, item)\n\n    # def check_values(self, memberPropertiesTable):\n    #     col = memberPropertiesTable.currentColumn()\n    #     row = memberPropertiesTable.currentRow()\n    #     try:\n    #         float(memberPropertiesTable.item(row, col).text())\n    #\n    #     except ValueError:\n    #         memberPropertiesTable.clearSelection()\n    #         memberPropertiesTable.item(row, col).setText(\"\")\n    #         DropDownActions.ActionClass.statusMessage(self, message=\"Please enter only numbers in the cell!\")\n    #\n    #     except AttributeError:\n    #         pass\n\n\nclass Boundary_Conditions(QMainWindow):\n    \"\"\"This Class is imposing the changes on the Boundary Conditions tab cells\"\"\"\n\n    def __init__(self, ui_layout):\n        QMainWindow.__init__(self)\n        self.ui = ui_layout\n        self.ActionMenus = DropDownActions.ActionClass(ui_layout)\n\n\n    def set_number_of_rows_fixities_table(self, number_of_nodes, RNCc):\n        self.ui.Fixities_table.blockSignals(True)\n        self.ui.Fixities_table.setRowCount(number_of_nodes)\n        # print('RNCc = ', RNCc)\n        for i in range(int(number_of_nodes)):\n            for j in range(9):\n                if j ==0: #first column row numbering\n                    text = str(int(i+1))\n                    item = QTableWidgetItem(text)\n                    item.setTextAlignment(QtCore.Qt.AlignCenter)\n                    item.setFlags(QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsUserCheckable)\n                    self.ui.Fixities_table.setItem(i, j, item)\n                elif j == 1: # combo box set up, done in the following function\n                    pass\n                else:  # check boxes are setting up\n                    item = QtGui.QTableWidgetItem()\n                    item.setFlags(QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)\n                    item.setCheckState(QtCore.Qt.Unchecked)\n                    self.ui.Fixities_table.setItem(i, j, item)\n\n            for j in range(9,12):\n                text = str(RNCc[i][int(j - 8)])\n                item = QTableWidgetItem(text)\n                item.setTextAlignment(QtCore.Qt.AlignCenter)\n                item.setFlags(QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsUserCheckable)\n                self.ui.Fixities_table.setItem(i, j, item)\n\n        self.ui.Fixities_table.blockSignals(False)\n\n    def Assign_comboBox_fixities_table(self, number_of_nodes):\n        r = int(number_of_nodes)\n        options = [\"Shear Center\", \"Flange 2\",\"Centroid\", \"Flange 1\"]\n        for i in range(r):\n            combo_box = QtGui.QComboBox()\n            for t in options:\n                combo_box.addItem(t)\n            self.ui.Fixities_table.setCellWidget(i, 1, combo_box)\n            combo_box.currentIndexChanged.connect(\n                lambda: BoundaryConditionApplication.BoundaryConditionArrays.BC_arrays(self))\n\n\n    # def Assign_comboBox_shear(self, number_of_nodes, element_member):\n    #     r = int(number_of_nodes)\n    #     # print('r = ', r)\n    #     # print('element member = ', element_member)\n    #     options = [\"Flange 2\", \"Shear Center\", \"Flange 1\"]\n    #     total_member_number = self.ui.Members_table.rowCount()\n    #     first_element_nodes = element_member[:,0]\n    #     # print('first element number = ', first_element_nodes)\n    #     first_element_nodes = first_element_nodes[first_element_nodes != 0]\n    #     # print('first element number = ', first_element_nodes)\n    #     # for i in range(total_member_number):\n    #         # first column row numbering\n    #     text = str(int(1))\n    #     item = QTableWidgetItem(text)\n    #     item.setTextAlignment(QtCore.Qt.AlignCenter)\n    #     item.setFlags(QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsUserCheckable)\n    #     self.ui.Shear_panel_table.setItem(0, 0, item)\n    #\n    #     # Status\n    #     text = \"Constant\"\n    #     item = QTableWidgetItem(text)\n    #     item.setFlags(QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)\n    #     item.setCheckState(QtCore.Qt.Checked)\n    #     self.ui.Shear_panel_table.setItem(0, 6, item)\n    #\n    #     combo_box = QtGui.QComboBox()\n    #     for m in range(total_member_number):\n    #         combo_box.addItem(str(m+1))\n    #     self.ui.Shear_panel_table.setCellWidget(0, 1, combo_box)\n    #     combo_box.currentIndexChanged.connect(\n    #         lambda: Boundary_Conditions.set_shear_panel_combo_box_for_members(self, 0))\n    #     combo_box.currentIndexChanged.connect(\n    #         lambda: SABRE2_main_subclass.update_shear_panel_table(self, self.ui.Shear_panel_table, flag=\"combo\"))\n    #\n    #     combo_box = QtGui.QComboBox()\n    #     for t in options:\n    #         combo_box.addItem(t)\n    #     self.ui.Shear_panel_table.setCellWidget(0, 2, combo_box)\n    #     combo_box.currentIndexChanged.connect(\n    #         lambda: SABRE2_main_subclass.update_shear_panel_table(self, self.ui.Shear_panel_table, flag=\"combo\"))\n    #\n    #     combo_box = QtGui.QComboBox()\n    #     for t in first_element_nodes:\n    #         combo_box.addItem(str(int(t)))\n    #     self.ui.Shear_panel_table.setCellWidget(0, 3, combo_box)\n    #     combo_box.currentIndexChanged.connect(\n    #         lambda: SABRE2_main_subclass.update_shear_panel_table(self, self.ui.Shear_panel_table, flag=\"combo\"))\n    #\n    #     combo_box = QtGui.QComboBox()\n    #     for t in first_element_nodes:\n    #         combo_box.addItem(str(int(t)))\n    #     self.ui.Shear_panel_table.setCellWidget(0, 4, combo_box)\n    #     combo_box.currentIndexChanged.connect(\n    #         lambda: SABRE2_main_subclass.update_shear_panel_table(self, self.ui.Shear_panel_table, flag=\"combo\"))\n    #\n    def set_shear_panel_combo_box_for_members(self, current_panel):\n        element_member = h5_file.h5_Class.read_array(self, 'element_member')\n        print('current panel = ', current_panel)\n        value = self.ui.Shear_panel_table.cellWidget(current_panel, 1).currentIndex()\n        element_nodes = element_member[:, value]\n        # print('first element number = ', first_element_nodes)\n        element_nodes = element_nodes[element_nodes != 0]\n        print('element_nodes = ', element_nodes)\n        combo_box = QtGui.QComboBox()\n        for t in element_nodes:\n            combo_box.addItem(str(int(t)))\n        self.ui.Shear_panel_table.setCellWidget(current_panel, 3, combo_box)\n        combo_box.currentIndexChanged.connect(\n            lambda: SABRE2_main_subclass.update_shear_panel_table(self, self.ui.Shear_panel_table, flag=\"combo\"))\n\n        combo_box = QtGui.QComboBox()\n        for t in element_nodes:\n            combo_box.addItem(str(int(t)))\n        self.ui.Shear_panel_table.setCellWidget(current_panel, 4, combo_box)\n        combo_box.currentIndexChanged.connect(\n            lambda: SABRE2_main_subclass.update_shear_panel_table(self, self.ui.Shear_panel_table, flag=\"combo\"))\n\n    def add_shear_panel(self, element_member, row, flag = 'test'):\n        print('add shear panel run ! ,', flag)\n        # shear_panel_vals = h5_file.h5_Class.read_array(self, 'shear_panel_values')\n        # print('shear panel vals = ', shear_panel_vals, '\\nrow = ' ,row)\n        total_member_number = self.ui.Members_table.rowCount()\n        first_element_nodes = element_member[:, 0]\n        # print('first element number = ', first_element_nodes)\n        first_element_nodes = first_element_nodes[first_element_nodes != 0]\n        options = [\"Flange 2\", \"Shear Center\", \"Flange 1\"]\n\n\n        text = str(row+1)\n        item = QTableWidgetItem(text)\n        item.setTextAlignment(QtCore.Qt.AlignCenter)\n        item.setFlags(QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsUserCheckable)\n        self.ui.Shear_panel_table.setItem(row, 0, item)\n\n        # Status\n        text = \"Constant\"\n        item = QTableWidgetItem(text)\n        item.setFlags(QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)\n        item.setCheckState(QtCore.Qt.Checked)\n        self.ui.Shear_panel_table.setItem(row, 6, item)\n\n        combo_box = QtGui.QComboBox()\n        for m in range(total_member_number):\n            combo_box.addItem(str(m + 1))\n        # combo_box.setCurrentIndex()\n        self.ui.Shear_panel_table.setCellWidget(row, 1, combo_box)\n        combo_box.currentIndexChanged.connect(\n            lambda: Boundary_Conditions.set_shear_panel_combo_box_for_members(self, row))\n        combo_box.currentIndexChanged.connect(\n            lambda: SABRE2_main_subclass.update_shear_panel_table(self, self.ui.Shear_panel_table, flag=\"combo\"))\n\n        combo_box = QtGui.QComboBox()\n        for t in options:\n            combo_box.addItem(t)\n        self.ui.Shear_panel_table.setCellWidget(row, 2, combo_box)\n        combo_box.currentIndexChanged.connect(\n            lambda: SABRE2_main_subclass.update_shear_panel_table(self, self.ui.Shear_panel_table, flag=\"combo\"))\n\n        combo_box = QtGui.QComboBox()\n        for t in first_element_nodes:\n            combo_box.addItem(str(int(t)))\n        self.ui.Shear_panel_table.setCellWidget(row, 3, combo_box)\n        combo_box.currentIndexChanged.connect(\n            lambda: SABRE2_main_subclass.update_shear_panel_table(self, self.ui.Shear_panel_table, flag=\"combo\"))\n\n        combo_box = QtGui.QComboBox()\n        for t in first_element_nodes:\n            combo_box.addItem(str(int(t)))\n        self.ui.Shear_panel_table.setCellWidget(row, 4, combo_box)\n        combo_box.currentIndexChanged.connect(\n            lambda: SABRE2_main_subclass.update_shear_panel_table(self, self.ui.Shear_panel_table, flag=\"combo\"))\n\n\n    def get_checkbox_values(self, table_for_checkbox):\n        column_count = table_for_checkbox.columnCount()\n        row_count = table_for_checkbox.rowCount()\n        fixities_vals = np.zeros((row_count, column_count))\n        for j in range(row_count):\n            for i in range(column_count):\n                if i == 0:\n                    fixities_vals[j, i] = (j + 1)\n                elif i == 1:\n                    value_combo = table_for_checkbox.cellWidget(j, i).currentIndex()\n                    fixities_vals[j, i] = value_combo + 1\n                elif i == 9 or i == 10 or i == 11:\n                    fixities_vals[j,i] = float(table_for_checkbox.item(j,i).text())\n                else:\n                    fixities_vals[j, i] = table_for_checkbox.item(j, i).checkState()\n                    if fixities_vals[j, i] == 2:\n                        fixities_vals[j, i] = 1\n\n        h5_file.h5_Class.update_array(self, fixities_vals, 'fixities_vals')\n        return fixities_vals\n\n    def set_active(self, table_name, line_edit):\n\n        active_values = DataCollection.update_lineedit_values(self, line_edit) - 1\n\n        selRange = PyQt4.QtGui.QTableWidgetSelectionRange(active_values, 0, active_values, 5)\n\n        table_name.setRangeSelected(selRange, True)\n\n        table_name.scrollToItem(table_name.item(active_values, 0))\n\n    def shear_panel_application(self, table_for_shear_panel, members_table, options, position):\n        table_for_shear_panel.blockSignals(True)\n\n        row_def = members_table.rowCount()\n\n        row_shear = table_for_shear_panel.rowCount()\n\n        if row_def == row_shear:\n            pass\n        else:\n            table_for_shear_panel.setRowCount(row_def)\n            # First Column Member numbers\n            for j in range(row_def):\n                item = QTableWidgetItem(str(j + 1))\n                item.setTextAlignment(QtCore.Qt.AlignCenter)\n                item.setFlags(QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsUserCheckable)\n                table_for_shear_panel.setItem(j, 0, item)\n\n            for i in range(1, row_def):\n                combo_box = QtGui.QComboBox()\n                for t in options:\n                    combo_box.addItem(t)\n                table_for_shear_panel.setCellWidget(i, position, combo_box)\n                combo_box.currentIndexChanged.connect(\n                    lambda: SABRE2_main_subclass.update_shear_panel_table(self, table_for_shear_panel, flag=\"combo\"))\n\n        table_for_shear_panel.blockSignals(False)\n\n    def shear_panel_nodes(self, table_for_shear_panel, member_ranges):\n        \" This function checks the values of the shear panel table\"\n\n        current_row = table_for_shear_panel.currentRow()\n        current_col = table_for_shear_panel.currentColumn()\n\n        member_ranges = [8, 12]\n\n        max_number = max(member_ranges)\n        min_number = min(member_ranges)\n\n        if current_col == 2 or current_col == 3:\n            try:\n                if float(table_for_shear_panel.item(current_row, current_col).text()) % 1 == 0:\n                    DropDownActions.ActionClass.statusMessage(self, message=\"\")\n                    pass\n                else:\n                    table_for_shear_panel.item(current_row, current_col).setText(\"\")\n                    DropDownActions.ActionClass.statusMessage(self, message=\"Please enter only integers in the cell!\")\n\n                if table_for_shear_panel.item(current_row, current_col) is None:\n                    pass\n                elif table_for_shear_panel.item(current_row, current_col).text() == \"\":\n                    pass\n                elif min_number <= float(table_for_shear_panel.item(current_row, current_col).text()) <= max_number:\n                    pass\n                else:\n                    table_for_shear_panel.item(current_row, current_col).setText(\"\")\n                    DropDownActions.ActionClass.statusMessage(self,\n                                                              message=(\n                                                                      \"Please define the joint within the member \" + table_for_shear_panel.item(\n                                                                  current_row, 0).text()))\n\n            except ValueError:\n                table_for_shear_panel.item(current_row, current_col).setText(\"\")\n                DropDownActions.ActionClass.statusMessage(self, message=\"Please enter only integers in the cell!\")\n            except AttributeError:\n                pass\n        else:\n            pass\n\n    def shear_panel_additional(self):\n        # RNCc = h5_file.h5_Class.read_array(self, 'RNCc')\n        # number_of_nodes = int(RNCc[:, 0].shape[0])\n        row = self.ui.Shear_panel_table.rowCount()\n        self.ui.Shear_panel_table.setRowCount(row+1)\n        element_member = h5_file.h5_Class.read_array(self,'element_member')\n        Boundary_Conditions.add_shear_panel(self,element_member, row, flag = 'additional flag')\n\n    def shear_panel_delete(self):\n        row = self.ui.Shear_panel_table.rowCount() - 1\n        self.ui.Shear_panel_table.setRowCount(row)\n\n    def shear_panel_values(self, tableName, flag=\"not combo\"):\n\n        col = tableName.currentColumn()\n        row = tableName.currentRow()\n        row_check = tableName.rowCount()\n        col_check = tableName.columnCount()\n        val1 = np.zeros((row_check, col_check))\n        if flag == \"not combo\" or flag == \"combo\":\n            try:\n                for i in range(row_check):\n                    for j in range(col_check):\n                        if j == 1 or j == 2 or j == 3 or j == 4:\n                            value_combo = tableName.cellWidget(i, j).currentIndex()\n                            val1[i, j] = value_combo\n                            DropDownActions.ActionClass.statusMessage(self, message=\"\")\n                            pass\n\n                        elif j == 6:\n                            val1[i, j] = tableName.item(i, j).checkState()\n                            DropDownActions.ActionClass.statusMessage(self, message=\"\")\n\n                        elif tableName.item(i, j) is None:\n                            pass\n                        else:\n                            val1[i, j] = float(tableName.item(i, j).text())\n                            DropDownActions.ActionClass.statusMessage(self, message=\"\")\n            except ValueError:\n                tableName.clearSelection()\n                tableName.item(row, col).setText(\"\")\n                DropDownActions.ActionClass.statusMessage(self, message=\"Please enter only numbers in this cell!\")\n            except AttributeError:\n                pass\n        return val1\n\n    def check_entered_data(self, tableName):\n        col = tableName.currentColumn()\n        row = tableName.currentRow()\n        try:\n            value = float(tableName.item(row, col).text())\n        except:\n            tableName.clearSelection()\n            tableName.item(row, col).setText(\"\")\n            DropDownActions.ActionClass.statusMessage(self, message=\"Please enter only numbers in this cell!\")\n\n    def Assign_comboBox_ground(self, tableName, options, position):\n        r = tableName.rowCount()\n        for i in range(r):\n            combo_box = QtGui.QComboBox()\n            for t in options:\n                combo_box.addItem(t)\n            tableName.setCellWidget(i, position, combo_box)\n            combo_box.currentIndexChanged.connect(\n                lambda: SABRE2_main_subclass.update_ground_table(self, tableName, flag=\"combo\"))\n\n    def ground_spring_values(self, tableName, flag=\"not combo\"):\n        col = tableName.currentColumn()\n        row = tableName.currentRow()\n        row_check = tableName.rowCount()\n        col_check = tableName.columnCount()\n        val1 = np.zeros((row_check, col_check))\n        if flag == \"not combo\" or flag == \"combo\":\n            try:\n                for i in range(row_check):\n                    for j in range(col_check):\n                        if j == 1:\n                            value_combo = tableName.cellWidget(i, j).currentIndex()\n                            val1[i, j] = value_combo\n                            DropDownActions.ActionClass.statusMessage(self, message=\"\")\n                            pass\n                        elif tableName.item(i, j) is None:\n                            pass\n                        elif j == 3 or j == 5 or j == 7 or j == 9 or j == 11 or j == 13 or j == 15:\n                            val1[i, j] = tableName.item(i, j).checkState()\n                            DropDownActions.ActionClass.statusMessage(self, message=\"\")\n                        else:\n                            val1[i, j] = float(tableName.item(i, j).text())\n                            DropDownActions.ActionClass.statusMessage(self, \"\")\n            except ValueError:\n                tableName.clearSelection()\n                tableName.item(row, col).setText(\"\")\n                DropDownActions.ActionClass.statusMessage(self, message=\"Please enter only numbers in this cell!\")\n        return val1\n\n    def release_tables_values(self, table_name):\n        \" this function is to get values of release tables\"\n\n        row = table_name.rowCount()\n        col = table_name.columnCount()\n\n        val_table = np.zeros((row, col))\n\n        for i in range(row):\n            for j in range(col):\n                if j == 0:\n                    val_table[i, j] = i + 1\n                else:\n                    val_table[i, j] = table_name.item(i, j).checkState()\n\n        return val_table\n\n\nclass LoadingClass(QMainWindow):\n    \" This class is to for defining loading conditions\"\n\n    def __init__(self, ui_layout):\n        QMainWindow.__init__(self)\n        self.ui = ui_layout\n        self.ActionMenus = DropDownActions.ActionClass(ui_layout)\n\n    def defined_load_names(self, tableName):\n        row_number = tableName.rowCount()\n\n        names = [None] * row_number\n        IDs = [None] * row_number\n        try:\n            for i in range(row_number):\n                names[i] = tableName.item(i, 0).text()\n                if ' ' in tableName.item(i, 1).text():\n                    tableName.item(i, 1).setText(\"\")\n                    DropDownActions.ActionClass.statusMessage(self, message=\"Please don't use any space in IDs column!\")\n                else:\n                    IDs[i] = tableName.item(i, 1).text()\n        except AttributeError:\n            pass\n        return names, IDs\n\n    def add_load(self, tableName):\n        row_number = tableName.rowCount()\n        if tableName.item(row_number - 1, 0) is None:\n            pass\n        elif tableName.item(row_number - 1, 1) is None:\n            pass\n        else:\n            tableName.insertRow(row_number)\n\n    def remove_load(self, tableName):\n        current_row = tableName.currentRow()\n\n        if current_row == -1:\n            DropDownActions.ActionClass.statusMessage(self, message=\"Please select load type to delete!\")\n        else:\n            tableName.removeRow(current_row)\n\n    def changes_on_load_combination(self, tableNameLoadType, tableNameLoadComb):\n        load_type_row = tableNameLoadType.rowCount()\n\n        [names, IDs] = LoadingClass.defined_load_names(self, tableNameLoadType)\n\n        combination_names = [\"#\", \"ID\"]\n        IDs.insert(0, \"ID\")\n        IDs.insert(0, \"#\")\n\n        try:\n\n            tableNameLoadComb.setColumnCount(load_type_row + 2)\n\n            tableNameLoadComb.setHorizontalHeaderLabels(IDs)\n\n        except AttributeError:\n            DropDownActions.ActionClass.statusMessage(self, message=\"Please enter ID for load type!\")\n\n    def check_entered_data(self, tableName):\n        col = tableName.currentColumn()\n        row = tableName.currentRow()\n        try:\n            value = float(tableName.item(row, col).text())\n        except:\n            tableName.clearSelection()\n            tableName.item(row, col).setText(\"\")\n            DropDownActions.ActionClass.statusMessage(self, message=\"Please enter only numbers in this cell!\")\n\n    def get_combination_data(self, tableName):\n        col = tableName.currentColumn()\n        row = tableName.currentRow()\n        row_check = tableName.rowCount()\n        col_check = tableName.columnCount()\n        LoadCombinationID = {}\n        val1 = np.zeros((row_check, col_check))\n        flag = 0\n        if row == -1:\n            pass\n        else:\n            try:\n                for i in range(row_check):\n                    for j in range(col_check):\n                        if tableName.item(i, j) is None:\n                            print(i)\n                            item = QTableWidgetItem(\"0\")\n                            tableName.setItem(i, j, item)\n                        elif j == 1:\n                            LoadCombinationID[i] = tableName.item(i, 1).text()\n                            if ' ' in LoadCombinationID[i]:\n                                LoadCombinationID[i] = \"\"\n                                tableName.item(i, 1).setText(\"\")\n\n                                flag = 1\n                            else:\n                                LoadCombinationID[i] = [tableName.item(i, 1).text()]\n                        else:\n                            val1[i, j] = float(tableName.item(i, j).text())\n                            if flag == 1:\n                                DropDownActions.ActionClass.statusMessage(self,\n                                                                          message=\"Please don't use any space in IDs column!\")\n                            else:\n                                DropDownActions.ActionClass.statusMessage(self, message=\"\")\n\n            except ValueError:\n                tableName.clearSelection()\n                tableName.item(row, col).setText(\"0\")\n                DropDownActions.ActionClass.statusMessage(self, message=\"Please enter only numbers in this cell!\")\n        return val1, LoadCombinationID\n\n    def add_load_comb(self, tableName):\n        row_number = tableName.rowCount()\n        if tableName.item(row_number - 1, 0) is None:\n            pass\n        elif tableName.item(row_number - 1, 1) is None:\n            pass\n        else:\n            tableName.insertRow(row_number)\n            for j in range(row_number + 1):\n                item = QTableWidgetItem(str(j + 1))\n                item.setTextAlignment(QtCore.Qt.AlignCenter)\n                item.setFlags(QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsUserCheckable)\n                tableName.setItem(j, 0, item)\n\n\nclass uniform_load_def(QMainWindow):\n    def __init__(self, ui_layout):\n        QMainWindow.__init__(self)\n        self.ui = ui_layout\n        self.ActionMenus = DropDownActions.ActionClass(ui_layout)\n\n    def combo_box_types(self, tableName, table_load_type, position):\n        [var1, IDs] = LoadingClass.defined_load_names(self, table_load_type)\n        uniform_load_def.set_combo_box(self, tableName, IDs, position)\n\n    def set_combo_box(self, tableName, options, position):\n\n        r = tableName.rowCount()\n        for i in range(r):\n            combo_box = QtGui.QComboBox()\n            for t in options:\n                combo_box.addItem(t)\n            tableName.setCellWidget(i, position, combo_box)\n            combo_box.currentIndexChanged.connect(\n                lambda: SABRE2_main_subclass.update_uniform_data(self, tableName, combo_flag=1))\n\n    def uniform_data_table(self, tableName, combo_flag=0):\n        col = tableName.currentColumn()\n        row = tableName.currentRow()\n        row_check = tableName.rowCount()\n        col_check = tableName.columnCount()\n        SegmentNames = {}\n        val1 = np.zeros((row_check, col_check))\n        try:\n            for i in range(row_check):\n                for j in range(col_check):\n                    if tableName.item(i, j) is None:\n                        item = QTableWidgetItem(\"0\")\n                        tableName.setItem(i, j, item)\n                    elif j == 0:\n                        SegmentNames[i] = tableName.item(i, j).text()\n                    elif j == 1 or j == 2:\n                        value_combo = tableName.cellWidget(i, j).currentIndex()\n                        val1[i, j] = value_combo\n                        DropDownActions.ActionClass.statusMessage(self, message=\"\")\n                    else:\n                        val1[i, j] = float(tableName.item(i, j).text())\n                        DropDownActions.ActionClass.statusMessage(self, message=\"\")\n\n        except ValueError:\n            tableName.clearSelection()\n            if combo_flag == 1:\n                pass\n            else:\n                tableName.item(row, col).setText(\"0\")\n                DropDownActions.ActionClass.statusMessage(self, message=\"Please enter only numbers in this cell!\")\n\n        print(SegmentNames)\n        return val1, SegmentNames\n\n\nclass point_load_def(QMainWindow):\n    def __init__(self, ui_layout):\n        QMainWindow.__init__(self)\n        self.ui = ui_layout\n        self.ActionMenus = DropDownActions.ActionClass(ui_layout)\n\n    def combo_box_types(self, tableName, table_load_type, position):\n        [var1, IDs] = LoadingClass.defined_load_names(self, table_load_type)\n        point_load_def.set_combo_box(self, tableName, IDs, position)\n\n    def set_combo_box(self, tableName, options, position):\n\n        r = tableName.rowCount()\n        for i in range(r):\n            combo_box = QtGui.QComboBox()\n            for t in options:\n                combo_box.addItem(t)\n            tableName.setCellWidget(i, position, combo_box)\n            combo_box.currentIndexChanged.connect(\n                lambda: SABRE2_main_subclass.update_point_data(self, tableName, combo_flag=1))\n\n    def point_data_table(self, tableName, combo_flag=0):\n        col = tableName.currentColumn()\n        row = tableName.currentRow()\n        row_check = tableName.rowCount()\n        col_check = tableName.columnCount()\n        val1 = np.zeros((row_check, col_check))\n        try:\n            for i in range(row_check):\n                for j in range(col_check):\n                    if tableName.item(i, j) is None:\n                        item = QTableWidgetItem(\"0\")\n                        tableName.setItem(i, j, item)\n                    elif j == 1 or j == 2:\n                        value_combo = tableName.cellWidget(i, j).currentIndex()\n                        val1[i, j] = value_combo\n                        DropDownActions.ActionClass.statusMessage(self, message=\"\")\n                    else:\n                        val1[i, j] = float(tableName.item(i, j).text())\n                        DropDownActions.ActionClass.statusMessage(self, message=\"\")\n\n        except ValueError:\n            tableName.clearSelection()\n            if combo_flag == 1:\n                pass\n            else:\n                tableName.item(row, col).setText(\"0\")\n                DropDownActions.ActionClass.statusMessage(self, message=\"Please enter only numbers in this cell!\")\n\n        return val1
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- V2_dev/SABRE2_main_subclass.py	(revision 14391ab9e75b5e78e97a3f5999e555aca78dbee6)
+++ V2_dev/SABRE2_main_subclass.py	(date 1524583027864)
@@ -1747,7 +1747,7 @@
             lambda: SABRE2_main_subclass.update_shear_panel_table(self, self.ui.Shear_panel_table, flag="combo"))
 
     def add_shear_panel(self, element_member, row, flag = 'test'):
-        print('add shear panel run ! ,', flag)
+        # print('add shear panel run ! ,', flag)
         # shear_panel_vals = h5_file.h5_Class.read_array(self, 'shear_panel_values')
         # print('shear panel vals = ', shear_panel_vals, '\nrow = ' ,row)
         total_member_number = self.ui.Members_table.rowCount()
